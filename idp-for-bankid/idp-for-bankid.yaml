openapi: 3.0.0
info:
  title: APIs exposed for Bank iD by Identity Providers
  version: 1.2.8
  description: |
    Describes APIs exposed by Identity Providers for Bank iD

security:
  - userInfo:
      - profile.name
      - profile.gender
      - profile.email
      - profile.phonenumber
      - profile.birthdate
      - profile.zoneinfo
      - profile.locale
      - profile.updatedat
      - notification.claims_updated

  - profile:
      - profile.name
      - profile.titles
      - profile.gender
      - profile.birthdate
      - profile.birthnumber
      - profile.birthplaceNationality
      - profile.maritalstatus
      - profile.addresses
      - profile.idcards
      - profile.paymentAccounts
      - profile.email
      - profile.phonenumber
      - profile.updatedat
      - profile.legalstatus
      - notification.claims_updated
      - sign.qualified
      - sign.officially_certified

servers:
  - url: 'https://idp.bank/authflow/'

paths:
  /auth:
    get:
      summary: Begin the IDP authorization flow
      externalDocs:
        description: 'OpenId Connect Authentication request'
        url: 'https://developer.bankid.cz/docs/apis#authorization-api'
      description: |
        This endpoint is a starting point for OAuth2 and OpenID Connect authorization code flows.
        This request authenticates the user and returns tokens to the client application as a part of the callback response.


        **Any number of the following query parameters may be sent by reference using `request_uri`**

        **Technical scopes** (used in the `scope` query parameter):
        - openid (always required scope)  
        - offline_access (the scope must be specified if a refresh_token release is required)

      tags:
        - Authentication
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        - $ref: '#/components/parameters/request_uri'
        - $ref: '#/components/parameters/auth_redirect_uri'
        - $ref: '#/components/parameters/auth_client_id'
        - $ref: '#/components/parameters/auth_response_type'
        - $ref: '#/components/parameters/auth_id_token_hint'
        - $ref: '#/components/parameters/auth_nonce'
        - $ref: '#/components/parameters/auth_state'
        - $ref: '#/components/parameters/auth_scope'
        - $ref: '#/components/parameters/auth_display'
        - $ref: '#/components/parameters/auth_prompt'
        - $ref: '#/components/parameters/auth_acr_values'
        - $ref: '#/components/parameters/auth_max_age'
        - $ref: '#/components/parameters/auth_response_mode'
        - $ref: '#/components/parameters/auth_ui_locales'
        - $ref: '#/components/parameters/auth_claims_json'

      callbacks:
        Success:
          '{$request.query.redirect_uri}':
            get:
              description: Redirect the End-User to `redirect_uri` after giving consent in bank's "HTML showing consent screen"
              parameters:
                - $ref: '#/components/parameters/auth_code'
                - $ref: '#/components/parameters/auth_state'
              responses:
                '200':
                  description: Redirect successful
                  headers:
                    X-B3-TraceId:
                      description: Unique ID for each API call for support purposes.
                      schema:
                        $ref: '#/components/schemas/X-B3-TraceId'

        Error:
          '{$request.query.redirect_uri}':
            get:
              description: >-
                If the resource owner denies the access request or if the request fails for reasons **other than a missing or invalid redirection URI**,
                the authorization server informs the client by adding the following parameters to the query component of the redirection URI using the
                "application/x-www-form-urlencoded" format
              parameters:
                - $ref: '#/components/parameters/auth_error'
                - $ref: '#/components/parameters/auth_error_description'
                - $ref: '#/components/parameters/auth_error_uri'
                - $ref: '#/components/parameters/auth_state'
              responses:
                '200':
                  description: Redirect successful
                  headers:
                    X-B3-TraceId:
                      description: Unique ID for each API call for support purposes.
                      schema:
                        $ref: '#/components/schemas/X-B3-TraceId'

      responses:
        '302':
          description: |
            Authentication Response. As a response to authentication flow, the IDP will then call the client 
            redirect_uri with an authorization code (in case of successful authentication) or an error 
            response code (if access denied, or when some other error occurred).
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
            Location:
              description: |
                Redirect response to endpoint specified in redirect_uri with parameters:

                `code` REQUIRED Authorization Code.

                `state` OAuth 2.0 state value. REQUIRED if the state parameter is present in the Authorization Request. Clients MUST verify that the state value is equal to the value of state parameter in the Authorization Request.

              schema:
                type: string
                format: uri
              example: |
                HTTP/1.1 302 Found
                Location: https://service.example.cz/callback
                    code=HA0Ji77f05AB
                    &expires_in=3600
                    &state=jdpi9hu1HH

        '400':
          $ref: '#/components/responses/RequestInvalidError'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

  /token:
    post:
      summary: Acquire a new set of tokens
      externalDocs:
        description: 'The OAuth 2.0 Authorization Framework'
        url: https://tools.ietf.org/html/rfc6749
      description: >-
        The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.


        The means through which the client obtains the location of the token endpoint are beyond the scope of this specification, but the location
        is typically provided in the service documentation. The endpoint URI **MUST NOT** include a fragment component.


        Since requests to the token endpoint result in the transmission of clear-text credentials (in the HTTP request and response), the
        authorization server **MUST** require the use of TLS when sending requests to the token endpoint.


        If the Client is a Confidential Client, then it **MUST** authenticate to the token endpoint using the authentication method registered for its client_id,
        as described in Section 9 of [OpenID.Core](https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication).
        Please note that the security specification requires the RP to user the `private_key_jwt` client authentication schema.


        Parameters sent without a value **MUST** be treated as if they were omitted from the request. The authorization server MUST ignore
        unrecognized request parameters. Request and response parameters **MUST NOT** be included more than once.
      security:
        - AccessTokenAuth: []
      tags:
        - Token management
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthorizationCodeTokenRequest'
                - $ref: '#/components/schemas/RefreshTokenRequest'
              description: >-
                In case of issuing access token from authorization code [RFC6749 - 4.1.3. Access Token Request](https://tools.ietf.org/html/rfc6749#section-4.1.3)

                In case of issuing access token from refresh token [RFC6749 - 6.  Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6)
              example: |
                redirect_uri=https%3A%2F%2Frp.example.com%2Fcallback
                &grant_type=authorization_code
                &code=45e53e78-a939-4075-8727-69bebf0f55bb
                &client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
                &client_assertion=eyJhbG...JV_adQssw5c
      responses:
        '200':
          description: 'Request for token was successful'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
            Cache-Control:
              schema:
                type: string
                enum:
                  - 'no-store'
            Pragma:
              schema:
                type: string
                enum:
                  - 'no-cache'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'

        '400':
          $ref: '#/components/responses/TokenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

  /token-info:
    post:
      summary: Get metadata about existing token
      externalDocs:
        description: 'Official documentation for OAuth 2.0 Token Introspection'
        url: 'https://tools.ietf.org/html/rfc7662'
      description: >-
        The introspection endpoint is an OAuth 2.0 endpoint that takes a parameter representing an OAuth 2.0 token and returns a JSON
        representing the meta information surrounding the token, including whether this token is currently active.
      security:
        - AccessTokenAuth: []
      tags:
        - Token management
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenIntrospectionRequest'
            example: |
              token=WwVEraxkI7KbtP31wD3XSpZKqGpsLiXg
              &token_type_hint=refresh_token
              &client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
              &client_assertion=eyJhbG...JV_adQssw5c
      responses:
        '200':
          description: 'Token information was obtained'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoResponse'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
        '401':
          $ref: '#/components/responses/TokenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

  /revoke:
    post:
      summary: Revoke a token
      description: >-
        Token revocation endpoint. Revokes access and refresh tokens. Revoking a refresh token effectively cancels the "session".
      tags:
        - Token management
      externalDocs:
        description: '[RFC7009] OAuth 2.0 Token Revocation'
        url: 'https://tools.ietf.org/html/rfc7009'
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRevocationRequest'
            example: |
              token=WwVEraxkI7KbtP31wD3XSpZKqGpsLiXg
              &token_type_hint=refresh_token
              &client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
              &client_assertion=eyJhbG...JV_adQssw5c
      responses:
        '200':
          description: Revocation successful
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
        '400':
          description: 'Bad Request'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
              example:
                error: invalid_token_type_hint
                error_description: 'Invalid token type value'
        '401':
          description: 'Unauthorized request'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
              example:
                error: UNAUTHORIZED
                error_description: 'Invalid/missing client authorization'

  /register:
    post:
      tags:
        - Dynamic Client Registration
      summary: Register a new client into the IDP
      externalDocs:
        description: OpenID Connect Dynamic Client Registration
        url: https://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration
      security:
        - RegistrationAuth: []
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        - $ref: '#/components/parameters/client_assertion'
        - $ref: '#/components/parameters/client_assertion_type'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSettings'
      responses:
        '201':
          description: Client registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInfo'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
        '400':
          $ref: '#/components/responses/RequestInvalidError'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

  /register/{client_id}:
    get:
      tags:
        - Dynamic Client Registration
      security:
        - RegistrationTokenAuth: []
      summary: Return ALL registered metadata for the client identified by the `client_id`
      externalDocs:
        description: OpenID Connect Dynamic Client Registration
        url: https://openid.net/specs/openid-connect-registration-1_0.html#ClientConfigurationEndpoint
      description: >-
        This resource MUST be idempotent.


        If the client does not exist on this server, the server MUST respond with HTTP 401 Unauthorized and the registration access token used to make this request SHOULD be immediately revoked.


        If the client does not have permission to read its record, the server MUST return an HTTP 403 Forbidden.
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        - $ref: '#/components/parameters/client_assertion'
        - $ref: '#/components/parameters/client_assertion_type'
        - name: client_id
          in: path
          required: true
          description: The id of the registered client to retrieve
          schema:
            type: string
            example: D40D25DB-C330-4331-A191-0A4F6CCD17D8
      responses:
        '200':
          description: Client metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInfo'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

    put:
      tags:
        - Dynamic Client Registration
      security:
        - RegistrationTokenAuth: []
      summary: Update ALL registered metadata for the client identified by the `client_id`.
      externalDocs:
        description: OAuth 2.0 Dynamic Client Registration Management Protocol
        url: https://tools.ietf.org/id/draft-ietf-oauth-dyn-reg-management-11.html#UpdateRequest
      description: >-
        This resource MUST be idempotent.


        This request MUST include all client metadata fields as returned to the client from a previous registration, read, or update operation. 
        The updated client metadata fields request MUST NOT include the registration_access_token, registration_client_uri, or client_id_issued_at fields described in Section 3.


        Valid values of client metadata fields in this request MUST replace, not augment, the values previously associated with this client. 
        Omitted fields MUST be treated as null or empty values by the server, indicating the client's request to delete them from the client's registration. 
        The authorization server MAY ignore any null or empty value in the request just as any other value.


        The client MUST include its client_id field in the request, and it MUST be the same as its currently-issued client identifier. 
        If the client includes the client_secret field in the request, the value of this field MUST match the currently-issued client secret for that client. 
        The client MUST NOT be allowed to overwrite its existing client secret with its own chosen value.


        For all metadata fields, the authorization server MAY replace any invalid values with suitable default values, and it MUST return any such fields to the client in the response.
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        - $ref: '#/components/parameters/client_assertion'
        - $ref: '#/components/parameters/client_assertion_type'
        - name: client_id
          in: path
          required: true
          description: The id of the registered client to update
          schema:
            type: string
            example: D40D25DB-C330-4331-A191-0A4F6CCD17D8
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInfo'
      responses:
        '200':
          description: Client metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInfo'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

    delete:
      tags:
        - Dynamic Client Registration
      security:
        - RegistrationTokenAuth: []
      summary: Delete registered client identified by the `client_id`
      description: >-
        A successful delete action will invalidate the client_id, client_secret, and registration_access_token for this client, thereby preventing the client_id from being used at either the authorization endpoint or token endpoint of the authorization server. 
        If possible, the authorization server SHOULD immediately invalidate all existing authorization grants and currently-active access tokens, refresh tokens, and other tokens associated with this client.


        If the registration access token used to make this request is not valid, the server MUST respond with an error as described in OAuth Bearer Token Usage [RFC6750].


        If the client does not exist on this server, the server MUST respond with HTTP 401 Unauthorized and the registration access token used to make this request SHOULD be immediately revoked, if possible.
      externalDocs:
        description: OAuth 2.0 Dynamic Client Registration Management Protocol
        url: https://tools.ietf.org/id/draft-ietf-oauth-dyn-reg-management-11.html#DeleteRequest
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        - $ref: '#/components/parameters/client_assertion'
        - $ref: '#/components/parameters/client_assertion_type'
        - name: client_id
          in: path
          required: true
          description: The id of the registered client to delete
          schema:
            type: string
            example: D40D25DB-C330-4331-A191-0A4F6CCD17D8
      responses:
        '204':
          description: Client deleted successfully
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

  /.well-known/openid-configuration:
    get:
      tags:
        - Discovery
      summary: IDP's OpenID Connect configuration discovery
      externalDocs:
        description: '[OpenID.Discovery] OpenID Connect Discovery 1.0'
        url: https://developer.bankid.cz/docs/apis#openid-configuration-discovery-api
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      responses:
        '200':
          description: OIDCConfiguration for Bank iD
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCConfiguration'

  /.well-known/jwks.json:
    get:
      description: >-
        This specific pathname is RECOMMENDED, exact pathname has to be specified in `OIDCConfiguration.jwks_uri`.


        This endpoint returns JSON Web Keys to be used as public keys for verifying OIDC ID Tokens, responses and encrypting requests.
      tags:
        - Discovery
      summary: JSON Web Keys Discovery
      externalDocs:
        description: '[RFC7517] JSON Web Key (JWK)'
        url: https://tools.ietf.org/html/rfc7517
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      responses:
        '200':
          description: JWKS
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'

  /userinfo:
    get:
      summary: Returns basic Claims about the authenticated End-User
      description: |
        The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the 
        authenticated End-User. To obtain the requested Claims about the End-User, the Client makes 
        a request to the UserInfo Endpoint using an Access Token obtained through OpenID Connect 
        Authentication. These Claims are normally represented by a JSON object that contains a collection 
        of name and value pairs for the Claims.

        Supported scopes (claims):
        - profile.name (name. given_name, family_name, middle_name, nickname, preferred_username)
        - profile.gender (gender)
        - profile.email (email, email_verified)
        - profile.phonenumber (phone_number, phone_number_verified)
        - profile.birthdate (birthdate)
        - profile.zoneinfo (zoneinfo)
        - profile.locale (locale)
        - profile.updatedat (updated_at)

        Technical scopes:
        - openid (always required scope)
        - offline_access (the scope must be specified if a refresh_token release is required)
        - notification.claims_updated (the application wants to send notifications)


      security:
        - Bearer: []
      tags:
        - User Info
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      responses:
        '200':
          description: 'OK'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo'
              examples:
                userInfo:
                  $ref: '#/components/examples/userInfo'
            application/jwt:
              schema:
                type: string
                format: binary
              example: ewoidHlwIjoiVXNlcmluZm8iLAoiYWxnIjoiSFMyNTYiCn0K.ewoic3ViIjogIjIzZjFhYzAwLTVkNTQtNDE2OS1hMjg4LTc5NGFlMmVhZDBjNCIsCiJuYW1lIjogIkphbiBOb3bDoWsiLAoiZ2l2ZW5fbmFtZSI6ICJKYW4iLAogIAkiZmFtaWx5X25hbWUiOiAiTm92w6FrIiwKICAJIm1pZGRsZV9uYW1lIjogIiIsCiAgCSJuaWNrbmFtZSI6ICJab3JybyIsCiAgCSJwcmVmZXJyZWRfdXNlcm5hbWUiOiAiSmFuIiwKIAkiZW1haWwiOiAiSi5ub3Zha0BlbWFpbC5jb20iLAogIAkiZW1haWxfdmVyaWZpZWQiOiB0cnVlLAogIAkiZ2VuZGVyIjogIm1hbGUiLAogIAkiYmlydGhkYXRlIjogIjE5NzAtMDgtMDEiLAogIAkiem9uZWluZm8iOiAiRXVyb3BlL1ByYWd1ZSIsCiAgCSJsb2NhbGUiOiAiY3NfQ1oiLAogIAkicGhvbmVfbnVtYmVyIjogIis0MjAxMjM0NTY3ODkiLAogIAkicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjogZmFsc2UsCiAidXBkYXRlZF9hdCI6IDE1NjgxODg0MzMwMDAKfQo=.cDEuITlDHi14RUEGG3cxEWoXFzZWIG46JmMWZu+/vXImNBh0QUXlgq07xbYWYzF2biUl77+9dXZ2XAEjbFg1fgEDKRXYrgUuCm8kWzNKHgQKIARNPhIBMHlbMtS9O0FmZRl5I31w07FdPC4ndUVkRBd6Dj4nWmEKe9aHHjFgAxFIUTI8bgFbPfK6lbcXLFZsWVZpKBw0MmlUPQFw
        '401':
          description: 'Unauthorized request'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
              example:
                error: UNAUTHORIZED
                error_description: 'Invalid/missing access token'
        '403':
          description: 'Request was forbidden'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
              example:
                error: FORBIDDEN
                error_description: 'Authentication with an expired access token or bearer access token having insufficient privileges'
        '500':
          description: 'Internal Server Error'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

  /profile:
    get:
      summary: Returns an extended (down to AML) set of authenticated End-User information.
      description: |
        The Profile Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the authenticated End-User.

        Supported scopes (claims):
        - profile.name (given_name, family_name, middle_name, nickname, preferred_username)
        - profile.titles (title_prefix, title_suffix)
        - profile.gender (gender)
        - profile.birthdate (birthdate, age, date_of_death)
        - profile.birthnumber (birthnumber)
        - profile.birthplaceNationality (birthplace, birthcountry, primary_nationality, nationalities)
        - profile.maritalstatus (maritalstatus)
        - profile.addresses (addresses.*)
        - profile.idcards (idcards.*)
        - profile.paymentAccounts (paymentAccounts)
        - profile.email (email)
        - profile.phonenumber (phone_number)
        - profile.updatedat (updated_at)
        - profile.legalstatus (majority, pep, limited_legal_capacity)

        Technical scopes:
        - openid (always required scope)
        - offline_access (the scope must be specified if a refresh_token release is required)
        - notification.claims_updated (the application wants to send notifications)
 
        Qualified signature scopes:
        - sign.qualified (the application wants to sign using Qualified Certificate)
        - sign.officially_certified (the application wants to sign using Officially Certified Qualified Certificate)

      security:
        - Bearer: []
      tags:
        - Identify
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        - $ref: '#/components/parameters/basic_register_check'

      responses:
        '200':
          description: 'OK'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profile'
              examples:
                profile:
                  $ref: '#/components/examples/profile'
            application/jwt:
              schema:
                type: string
                format: binary
              example: ewoidHlwIjoiVXNlcmluZm8iLAoiYWxnIjoiSFMyNTYiCn0K.ewoic3ViIjogIjIzZjFhYzAwLTVkNTQtNDE2OS1hMjg4LTc5NGFlMmVhZDBjNCIsCiJuYW1lIjogIkphbiBOb3bDoWsiLAoiZ2l2ZW5fbmFtZSI6ICJKYW4iLAogIAkiZmFtaWx5X25hbWUiOiAiTm92w6FrIiwKICAJIm1pZGRsZV9uYW1lIjogIiIsCiAgCSJuaWNrbmFtZSI6ICJab3JybyIsCiAgCSJwcmVmZXJyZWRfdXNlcm5hbWUiOiAiSmFuIiwKIAkiZW1haWwiOiAiSi5ub3Zha0BlbWFpbC5jb20iLAogIAkiZW1haWxfdmVyaWZpZWQiOiB0cnVlLAogIAkiZ2VuZGVyIjogIm1hbGUiLAogIAkiYmlydGhkYXRlIjogIjE5NzAtMDgtMDEiLAogIAkiem9uZWluZm8iOiAiRXVyb3BlL1ByYWd1ZSIsCiAgCSJsb2NhbGUiOiAiY3NfQ1oiLAogIAkicGhvbmVfbnVtYmVyIjogIis0MjAxMjM0NTY3ODkiLAogIAkicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjogZmFsc2UsCiAidXBkYXRlZF9hdCI6IDE1NjgxODg0MzMwMDAKfQo=.cDEuITlDHi14RUEGG3cxEWoXFzZWIG46JmMWZu+/vXImNBh0QUXlgq07xbYWYzF2biUl77+9dXZ2XAEjbFg1fgEDKRXYrgUuCm8kWzNKHgQKIARNPhIBMHlbMtS9O0FmZRl5I31w07FdPC4ndUVkRBd6Dj4nWmEKe9aHHjFgAxFIUTI8bgFbPfK6lbcXLFZsWVZpKBw0MmlUPQFw
        '401':
          description: 'Unauthorized request'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
              example:
                error: 'UNAUTHORIZED'
                error_description: 'Invalid/missing access token'
        '403':
          description: 'Request was forbidden'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
              example:
                error: 'FORBIDDEN'
                error_description: 'Authentication with an expired access token or bearer access token having insufficient privileges'
        '429':
          $ref: '#/components/responses/TooManyRequestError'
        '500':
          $ref: '#/components/responses/UserNotEligible'

  /ros:
    post:
      tags:
        - Authorization
      summary: Resource for request object endpoint on Authorization Server
      description: >
        Provides resource for SePs for initiation of authorization flow according OpenID Connect Financial-grade API
        Currently only document sign is allowed. Further objects that could be subject to authorization will be allowed.
        Returns object identifier and url on which authorization is started. In case of document signature upload URL for document is returned.
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      security:
        - AccessTokenAuth: []
        - {}
      requestBody:
        required: true
        description: JWT containing JSON as payload.
        content:
          application/jwe:
            schema:
              $ref: '#/components/schemas/RequestObjectRequest'
      responses:
        '201':
          description: 'Request for object submission was successful'
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestObjectResponse'
        '400':
          $ref: '#/components/responses/RequestInvalidError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestError'

  /authorize:
    get:
      tags:
        - Authorization
      summary: Initiation of Authorization (SIGN) flow on Authorization Server with a request object
      description: >
        Resource for initiation of authorization flow on object registered on Authorization Server side
        Returns redirect for end user to authorize object on Authorization Server
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        - $ref: '#/components/parameters/request_uri'
        - $ref: '#/components/parameters/redirect_uri'
      responses:
        '302':
          description: Redirect successful
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
            Location:
              $ref: '#/components/headers/location'
        '400':
          $ref: '#/components/responses/RequestInvalidError'
        '404':
          $ref: '#/components/responses/NotFoundException'
        '429':
          $ref: '#/components/responses/TooManyRequestError'
      callbacks:
        Success:
          '{$request.query.redirect_uri}':
            get:
              description: Returns result of authorization
              parameters:
                - $ref: '#/components/parameters/auth_code'
                - $ref: '#/components/parameters/auth_state'
              responses:
                '200':
                  description: Redirect successful
                  headers:
                    X-B3-TraceId:
                      description: Unique ID for each API call for support purposes.
                      schema:
                        $ref: '#/components/schemas/X-B3-TraceId'
        Error:
          '{$request.query.redirect_uri}':
            get:
              description: >-
                If the resource owner denies the access request or if the request fails for reasons **other than a missing or invalid redirection URI**,
                the authorization server informs the client by adding the following parameters to the query component of the redirection URI using the
                "application/x-www-form-urlencoded" format
              parameters:
                - $ref: '#/components/parameters/auth_error'
                - $ref: '#/components/parameters/auth_error_description'
                - $ref: '#/components/parameters/auth_error_uri'
                - $ref: '#/components/parameters/auth_state'
              responses:
                '200':
                  description: Redirect successful
                  headers:
                    X-B3-TraceId:
                      description: Unique ID for each API call for support purposes.
                      schema:
                        $ref: '#/components/schemas/X-B3-TraceId'


  /healthcheck:
    get:
      description: >-
        This specific pathname is RECOMMENDED, exact pathname has to be specified in `OIDCConfiguration.healthcheck_endpoint`.
        This endpoint returns HealthCheck and Outage information of Bank systems. It is intended to be polled (queried periodically) by the RP.
        Design of this EP is based on the HealthCheck EP described in COBS RuleBook V04.1.
      tags:
        - Health Check
      summary: Health Check
      parameters:
        - in: header
          name: X-B3-TraceId
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
      responses:
        '200':
          description: HealthCheck Response
          headers:
            X-B3-TraceId:
              description: Unique ID for each API call for support purposes.
              schema:
                $ref: '#/components/schemas/X-B3-TraceId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
        '424':
          description: Rate limit exceeded. RP MUST NOT exceed the `poll_interval` to prevent resource over-utilization.

components:
  headers:
    location:
      schema:
        type: string
      description: >
        Location of redirect returned in HTTP 302 response for end user.
      example: www.bankd.cz/callback?sid=123456&state=abcdef

  parameters:
    txn:
      in: query
      name: txn
      description:
        The txn Claim as defined in [RFC8417] is used in the context of
        this extension to build audit trails across the parties involved in an
        OpenID Connect transaction.
      example: 5fo70547-0f7f-4794-acb0-d959f5a899a6
      schema:
        type: string

    document_id:
      name: document_id
      in: query
      description: >-
        Id of document included in custom PDF metadata. This attribute must be included in PDF metadata under document-id key.
      schema:
        type: string
        example: '7159534b-3b88-4f29-866b-9e83489d3053'

    client_id:
      name: client_id
      in: query
      required: true
      description: OAuth 2.0 Client Identifier valid at the Authorization Server.
      schema:
        type: string
      example: D40D25DB-C330-4331-A191-0A4F6CCD17D8

    redirect_uri:
      name: redirect_uri
      in: query
      description: URL for end-user redirect to auhtorization server
      schema:
        type: string
      example: https://client.example.org/auth/callback

    auth_scope:
      in: query
      required: true
      name: scope
      description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. See Sections 5.4 and 11 for additional scope values defined by this specification.
      schema:
        type: string
        example: 'openid profile.name profile.addresses'

    auth_response_type:
      name: response_type
      in: query
      required: true
      description: OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.
      schema:
        type: array
        maxItems: 1
        items:
          type: string
          enum:
            - code

    auth_client_id:
      name: client_id
      in: query
      required: true
      description: OAuth 2.0 Client Identifier valid at the Authorization Server.
      schema:
        type: string
        example: 'D40D25DB-C330-4331-A191-0A4F6CCD17D8'

    auth_redirect_uri:
      name: redirect_uri
      required: true
      in: query
      description: >-
        Redirection URI to which the response will be sent.
        This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986] 
        (Simple String Comparison). When using this flow, the Redirection URI MUST use the https scheme. The Redirection URI MAY use an alternate scheme, such as one that is intended 
        to identify a callback into a native application.
      schema:
        type: string
        format: uri
        example: 'https://rp.example.com/callback'

    auth_state:
      name: state
      required: true
      in: query
      description: >-
        Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically 
        binding the value of this parameter with a browser cookie.
      schema:
        type: string
        example: 'XlwuwppIWL9F32SZDULd'

    auth_code:
      name: code
      required: true
      in: query
      description: >-
        The authorization code generated by the authorization server.  The authorization code MUST expire shortly after it is issued to mitigate the risk of leaks.  A maximum authorization code lifetime of 10 minutes is
        RECOMMENDED.  The client MUST NOT use the authorization code more than once.  If an authorization code is used more than once, the authorization server MUST deny the request and SHOULD
        revoke (when possible) all tokens previously issued based on that authorization code.  The authorization code is bound to the client identifier and redirection URI.
      schema:
        type: string
        example: '43F8E043-6AD8-4154-AC48-019AE65D9F7C'

    auth_response_mode:
      name: response_mode
      in: query
      description: >-
        Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response 
        Mode that would be requested is the default mode specified for the Response Type.
      schema:
        type: string
        enum:
          - query
        example: 'query'

    auth_nonce:
      name: nonce
      required: true
      in: query
      description: >-
        String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. 
        Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values. For implementation notes, see Section 15.5.2.
      schema:
        type: string
        example: 'nxrt-084-222_wdutKuOasdj'

    auth_display:
      name: display
      required: true
      in: query
      description: >-
        ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are:

        * page - The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, 
            this is the default display mode.

        * popup - The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate 
            size for a login-focused dialog and should not obscure the entire window that it is popping up over.

        * touch - The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface.

        The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.
      schema:
        type: string
        enum:
          - page
          - popup
          - touch
        example: 'page'

    auth_prompt:
      name: prompt
      required: true
      in: query
      description: >-
        Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent. The defined values are:

        * none - The Authorization Server MUST NOT display any authentication or consent user interface pages. An error is returned if an End-User is not already authenticated 
            or the Client does not have pre-configured consent for the requested Claims or does not fulfill other conditions for processing the request. The error code will 
            typically be login_required, interaction_required, or another code defined in Section 3.1.2.6. This can be used as a method to check for existing authentication 
            and/or consent.

        * login - The Authorization Server SHOULD prompt the End-User for re-authentication. If it cannot re-authenticate the End-User, it MUST return an error, typically login_required.

        * consent - The Authorization Server SHOULD prompt the End-User for consent before returning information to the Client. If it cannot obtain consent, it MUST return 
            an error, typically consent_required.

        The prompt parameter can be used by the Client to make sure that the End-User is still present for the current session or to bring attention to the request. If this parameter 
        contains none with any other value, an error is returned. Definition of OpenID Connect Core [OpenID Connect Core](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)
        contain possible values none, login, consent, select_account, but we define subset because security reasons.
      schema:
        type: array
        maxItems: 3
        items:
          type: string
          enum:
            - none
            - login
            - consent
        example: 'none consent'

    auth_max_age:
      name: max_age
      required: false
      in: query
      description: >-
        Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is 
        greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] 
        max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.
      schema:
        type: integer
        format: int64
        example: '6000'

    auth_ui_locales:
      name: ui_locales
      in: query
      description: >-
        End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. 
        For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English 
        (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
      schema:
        type: string
        example: 'fr-CA.UTF-8'

    auth_id_token_hint:
      name: id_token_hint
      in: query
      description: >-
        ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User 
        identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, 
        such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; 
        however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when 
        it is used as an id_token_hint value.

        This feature is REQUIRED from banks as a **possible easy authentication** for users that can be **identified using an existing `IDToken`**.

      schema:
        type: string
        example: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjdlOGFkZmMzMjU1OTEyNzI0ZDY4NWZmYmIwOThjNDEyIiwidHlwIjoiSldUIn0.eyJuYmYiOjE0OTE3NjUzMjEsImV4cCI6MTQ5MTc2'

    auth_acr_values:
      name: acr_values
      in: query
      description: >-
        The parameter represents the required authentication level. The application should only request values configured in the developer portal (Enable 2FA by default switch in configuration).
        The values determine the level of authentication as well as the possible use of authentication factors.
        The value of ```loa2``` corresponds to one-factor authentication. The value of ```loa3``` corresponds to authentication using two independent verification factors (2FA or also SCA).
      schema:
        type: string
        enum:
          - loa3
          - loa2
        example: 'loa3'

    auth_claims_json:
      name: claims
      in: query
      deprecated: true
      description: >-
        The `claims` Authentication Request parameter requests that specific Claims be returned from the UserInfo and Profile Endpoints and/or in the ID Token. It is represented as a JSON object 
        containing lists of Claims being requested from these locations. Properties of the Claims being requested MAY also be specified.

        The claims parameter value is represented in an OAuth 2.0 request as URL encoded JSON (which ends up being form-urlencoded when passed as an OAuth parameter).

        The top-level members of the Claims request JSON object are:

          * `userinfo` - OPTIONAL. Requests that the listed individual Claims be returned from the UserInfo Endpoint. If not present, the Claims being requested from the UserInfo Endpoint are 
          only those requested using scope values. When the userinfo member is used, the request MUST also use a response_type value that results in an Access Token being issued to the Client for use 
          at the UserInfo Endpoint.
          * `profile` - OPTIONAL. Requests that the listed individual Claims be returned from the Profile Endpoint. If not present, the Claims being requested from the Profile Endpoint are 
          only those requested using scope values. When the profile endpoint member is used, the request MUST also use a response_type value that results in an Access Token being issued to the Client for use 
          at the Profile Endpoint.

          Example of claims JSON content in URL decoded form:
          ```
            {
              "userinfo": {
                "name": {"essential": true},
                "email": false
              },
              "profile": {
                "gender": {"essential": true}
              }
            }
          ```

      schema:
        type: string
        example: '%7B%22userinfo%22%3A%7B%22name%22%3A%7B%22essential%22%3Atrue%7D%2C%22email%22%3Afalse%7D%2C%22profile%22%3A%7B%22gender%22%3A%7B%22essential%22%3Atrue%7D%7D%7D%0A'

    auth_error:
      name: error
      in: query
      description: >-
        - invalid_request -
              The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.

        - unauthorized_client -
              The client is not authorized to request an authorization code using this method.

        - access_denied -
              The resource owner or authorization server denied the request.

        - unsupported_response_type -
              The authorization server does not support obtaining an authorization code using this method.
              
        - invalid_scope -
              The requested scope is invalid, unknown, or malformed.

        - server_error -
              The authorization server encountered an unexpected condition that prevented it from fulfilling the request. 
              (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.)

        - temporarily_unavailable -
              The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
              (This error code is needed because a 503 Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.)

        - interaction_required -
              The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt  parameter value in the Authentication Request is none, but the
              Authentication Request cannot be completed without displaying a user interface for End-User interaction.

        - login_required -
              The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request 
              cannot be completed without displaying a user interface for End-User authentication.

        - account_selection_required -
              The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did 
              not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a 
              user interface to prompt for a session to use.

        - consent_required -
              The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request 
              cannot be completed without displaying a user interface for End-User consent.

        - invalid_request_uri -
              The request_uri in the Authorization Request returns an error or contains invalid data.

        - invalid_request_object -
              The request parameter contains an invalid Request Object.

        - request_not_supported -
              The OP does not support use of the request parameter defined in Section 6.

        - request_uri_not_supported -
              The OP does not support use of the request_uri parameter defined in Section 6.

        - registration_not_supported -
              The OP does not support use of the registration parameter defined in Section 7.2.1.
              
        - eid_doesnt_exist
              The end-user cannot proceed with authentication since they don't have valid eID service. 

        - user_not_eligible
              The end-user eligibility to use the service is limited due to age restriction or missing required data.
      schema:
        externalDocs:
          description: '[RFC6749] - The OAuth 2.0 Authorization Framework - Authentication Error Codes 4.1.2.1'
          url: https://tools.ietf.org/html/rfc6749#section-4.1.2.1
        type: string
        enum:
          - invalid_request
          - unauthorized_client
          - access_denied
          - unsupported_response_type
          - invalid_scope
          - server_error
          - temporarily_unavailable
          - interaction_required
          - login_required
          - account_selection_required
          - consent_required
          - invalid_request_uri
          - invalid_request_object
          - request_not_supported
          - request_uri_not_supported
          - registration_not_supported
          - eid_doesnt_exist
          - user_not_eligible
        example: invalid_request

    auth_error_description:
      name: error_description
      in: query
      description: >-
        Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred.
        Values for the "error_description" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
      schema:
        type: string
        example: General server error

    auth_error_uri:
      name: error_uri
      in: query
      description: >-
        URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.
        Values for the "error_uri" parameter MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E.
      schema:
        type: string
        format: uri
        example: https://idp.example.com/error123

    request_uri:
      name: request_uri
      in: query
      description: >-
        This parameter enables OpenID Connect requests to be passed by reference, rather than by value.
        The `request_uri` value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.
      schema:
        type: string
        format: uri
        example: 'https://rp.example.com/request/13CACDFD-884C-4E57-B78D-90B69A96C86A.jwt'

    client_assertion:
      name: client_assertion
      in: header
      description: >-
        The client-signed assertion in the form of a JWT used to authenticate the client if `client_secret_jwt` or `private_key_jwt` authentication methods are used. Defined in
        [OpenID.Core](https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication)
      schema:
        type: string
        format: JWT
        example: 'PHNhbWxwOl ... ZT'

    client_assertion_type:
      name: client_assertion_type
      in: header
      description: >-
        The type of client assertion used as defined in
        [OpenID.Core](https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication)
      schema:
        type: string
        enum:
          - 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
        example: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'

    basic_register_check:
      name: basic_register
      in: query
      required: false
      description: Bank MUST check Basic Register in case this query parametr is used.
      schema:
        type: boolean
        example: true

  requestBodies:
    RevocationRequest:
      required: true
      content:
        application/x-www-form-urlencoded:
          example: |
            token=WwVEraxkI7KbtP31wD3XSpZKqGpsLiXg
            &token_type_hint=refresh_token

  schemas:
    sub:
      type: string
      description: Identifier for the End-User at the Issuer.
      example: 23f1ac00-5d54-4169-a288-794ae2ead0c4
    txn_data:
      type: string
      description: |
        The `txn` Claim is used to build audit trails and MUST contain the following basic transaction information:

          - unique transaction-id
          - list of used scopes

        The required `txn` format is a string containing a unique transaction id in the UUID format, which is separated by a colon from the individual scopes used in the call, which are also separated by a colon.

        Format:
          `uniquetransactionid:usedscope:usedscope:usedscope`

      example: 6941683f-c6ee-410c-add0-d52d63091069:openid:profile.name:profile.addresses
    name:
      type: string
      description: End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
      example: Jan Novák
    title_prefix:
      type: string
      description: User's title prefix
      example: Ing.
    title_suffix:
      type: string
      description: User`s title suffix
      example: Jr.
    given_name:
      type: string
      description: Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
      example: Jan
    family_name:
      type: string
      description: Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
      example: Novák
    middle_name:
      type: string
      description: Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note
        that in some cultures, middle names are not used.
    nickname:
      type: string
      description:
        Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
      example: Fantomas
    preferred_username:
      type: string
      description: Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /,
        or whitespace. The API consumer MUST NOT rely upon this value being unique.
      example: JanN
    email:
      type: string
      description:
        End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The API consumer MUST NOT rely upon this value being unique.
      example: j.novak@email.com
    email_verified:
      type: boolean
      description: True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail
        address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon
        the trust framework or contractual agreements within which the parties are operating.
    gender:
      type: string
      description: End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
      enum:
        - male
        - female
        - other
    birthdate:
      type: string
      description: End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year,
        YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to
        take this factor into account to correctly process the dates.
      format: date
      example: 1970-08-01
    birthnumber:
      type: string
      description: User's birth number. Birth number is required if nationality is Czech ("CZ") and MUST be without forward slash.
      example: '1101700140'
    birthplace:
      type: string
      description: User's birth place.
      example: 'Praha 4'
    birthcountry:
      type: string
      description: User's country of birth. Element in ISO 3166-1 format, subtype ALPHA-2. This means two letters in uppercase.
      example: 'CZ'
    primary_nationality:
      type: string
      deprecated: true
      title: primary_nationality
      description: Optional element user's primary nationality, ISO 3166-1 format, subtype ALPHA-2. This means two letters in uppercase.
      example: 'CZ'
    nationalities:
      type: array
      title: nationalities
      description:
        All user's nationalities, ISO 3166-1 format, subtype ALPHA-2. This means two letters in uppercase.
      items:
        type: string
      example: ['CZ', 'AT', 'SK']

    maritalstatus:
      type: string
      description: >-
        Marital status. One of:
          * `COHABITATION` - cohabitation status.
          * `MARRIED` - married status
          * `DIVORCED` - divorced status
          * `REGISTERED_PARTNERSHIP` - registered partnership status
          * `REGISTERED_PARTNERSHIP_CANCELED` - registered partnership canceled status
          * `WIDOWED` - widowed status            
          * `SINGLE` - single status
          * `UNKNOWN` - unknown status
      enum:
        - COHABITATION
        - MARRIED
        - DIVORCED
        - REGISTERED_PARTNERSHIP
        - REGISTERED_PARTNERSHIP_CANCELED
        - WIDOWED
        - SINGLE
        - UNKNOWN
    addresses:
      type: array
      description: User’s addresses
      items:
        $ref: '#/components/schemas/address'
    idcards:
      type: array
      title: idcards
      description: User's id cards
      items:
        $ref: '#/components/schemas/idcard'

    pep:
      type: boolean
      description:
        Flag that the authenticated user is politically exposed person (PEP). In financial regulation, a politically exposed person is one who has been entrusted
        with a prominent public function. A PEP generally presents a higher risk for potential involvement in bribery and corruption by virtue of their position and the influence that they may hold.
      example: false
    limited_legal_capacity:
      type: boolean
      description: An indication of whether this is a person with limited legal capacity.
      example: false

    age:
      type: number
      description: Current age of the client given in years.
      example: 28
    date_of_death:
      type: string
      description:
        'Date of death of the client. Practically still null. Only in the case of updating data (not yet part of the standard definition) is it possible to receive a specific date.'
      example: null
    majority:
      type: boolean
      description: An person is over the threshold of adulthood as recognized or declared in law.
      example: true
    zoneinfo:
      type: string
      description: String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
      example: Europe/Prague
    locale:
      type: string
      description: End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2
        [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator
        rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
      example: cs_CZ
    phone_number:
      type: string
      description: End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1(425) 555-1212 or +56(2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC3966 [RFC3966] extension syntax, for example, +1(604) 555-1234;ext=5678.
      example: '+420123456789'
    phone_number_verified:
      type: boolean
      description: True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone
        number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust
        framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC3966 format.
    updated_at:
      type: number
      description:
        Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
      format: long
      example: 1650887066

    X-B3-TraceId:
      description: Unique ID for each API call for support purposes.
      type: string
      pattern: '^[a-zA-Z0-9]{32}$'
      example: 26f6ea6095205ebc26f6ea6095205ebc

    claims_profile:
      description: |
        Object that is the container for the verified Claims about the End-User from Profile endpoint. Data in this element are checked against state basic registers.
      type: object
      anyOf:
        - $ref: '#/components/schemas/title_prefix'
        - $ref: '#/components/schemas/title_suffix'
        - $ref: '#/components/schemas/given_name'
        - $ref: '#/components/schemas/family_name'
        - $ref: '#/components/schemas/middle_name'
        - $ref: '#/components/schemas/gender'
        - $ref: '#/components/schemas/birthdate'
        - $ref: '#/components/schemas/birthnumber'
        - $ref: '#/components/schemas/age'
        - $ref: '#/components/schemas/majority'
        - $ref: '#/components/schemas/date_of_death'
        - $ref: '#/components/schemas/birthplace'
        - $ref: '#/components/schemas/birthcountry'
        - $ref: '#/components/schemas/primary_nationality'
        - $ref: '#/components/schemas/nationalities'
        - $ref: '#/components/schemas/maritalstatus'
        - $ref: '#/components/schemas/addresses'
        - $ref: '#/components/schemas/idcards'
        - $ref: '#/components/schemas/email'
        - $ref: '#/components/schemas/phone_number'
        - $ref: '#/components/schemas/pep'
        - $ref: '#/components/schemas/limited_legal_capacity'
        - $ref: '#/components/schemas/paymentAccounts'
        - $ref: '#/components/schemas/updated_at'
      example:
        given_name: Jan
        family_name: Novák
        gender: male
        birthdate: '1970-08-01'
        birthplace: 'Praha 4'

    claims_userinfo:
      description: |
        Object that is the container for the verified Claims about the End-User from Userinfo endpoint. Data in this element are checked against state basic registers.
      type: object
      anyOf:
        - $ref: '#/components/schemas/name'
        - $ref: '#/components/schemas/given_name'
        - $ref: '#/components/schemas/family_name'
        - $ref: '#/components/schemas/middle_name'
        - $ref: '#/components/schemas/nickname'
        - $ref: '#/components/schemas/preferred_username'
        - $ref: '#/components/schemas/email'
        - $ref: '#/components/schemas/email_verified'
        - $ref: '#/components/schemas/gender'
        - $ref: '#/components/schemas/birthdate'
        - $ref: '#/components/schemas/zoneinfo'
        - $ref: '#/components/schemas/locale'
        - $ref: '#/components/schemas/phone_number'
        - $ref: '#/components/schemas/phone_number_verified'
        - $ref: '#/components/schemas/updated_at'
      example:
        name: Jan Novák
        given_name: Jan
        family_name: Novák
        gender: male
        birthdate: '1970-08-01'

    verification:
      description: "This element contains the information about the process conducted to verify a person's identity and bind the respective person data to a user account."
      type: object
      required:
        - trust_framework
        - verification_process
      properties:
        trust_framework:
          type: string
          title: trust_framework
          enum:
            - cz_aml
          description: 'String determining the trust framework governing the identity verification process and the identity assurance level of the OP.'
        time:
          type: string
          format: 'date-time'
          title: time
          description: 'Time stamp in ISO 8601:2004 [ISO8601-2004] YYYY-MM-DDThh:mm:ss±hh format **with colon in date offset** (e.g. 2015-04-05T14:31:22+02:00) representing the date and time when identity verification took place. Presence of this element might be required for certain trust frameworks.'
          example: "2015-04-05T14:31:22+02:00"
        verification_process:
          type: string
          title: verification_process
          description: |
            Reference to the identity verification process as performed by the identity providers. Used for backtracing in case of disputes or audits. Presence of this element might be required for certain trust 
            frameworks. In the case of Bank iD, the value of this element requires the identification number of the bank (financial institution) that carried out the identification process.

            This is the bank's identification number, which is kept in the list of regulated and registered entities of the CNB JERRS.
          example: '45244782'
    verified_claims:
      description: 'By this element Bank iD wants to ensure that Bank IDP cannot mix up verified and unverified Claims and incidentally process unverified Claims as verified Claims.'
      type: object
      properties:
        verification:
          $ref: '#/components/schemas/verification'
        claims:
          $ref: '#/components/schemas/claims_profile'
      required:
        - verification

    verified_claims_userinfo:
      description: 'By this element Bank iD wants to ensure that Bank IDP cannot mix up verified and unverified Claims and incidentally process unverified Claims as verified Claims.'
      type: object
      properties:
        verification:
          $ref: '#/components/schemas/verification'
        claims:
          $ref: '#/components/schemas/claims_userinfo'
      required:
        - verification

    address:
      type: object
      title: address
      description: User's address
      properties:
        type:
          type: string
          title: type
          description: |-
            Type of address element as an ENUM:
              * `PERMANENT_RESIDENCE` - permanent residence address
              * `SECONDARY_RESIDENCE` - secondary residence address
              * `UNKNOWN` - unknown address type
          enum:
            - PERMANENT_RESIDENCE
            - SECONDARY_RESIDENCE
            - UNKNOWN
        street:
          type: string
          title: street
          description: Street
        buildingapartment:
          type: string
          title: buildingapartment
          description: Address land registry number.
        streetnumber:
          type: string
          title: streetnumber
          description: Additional address house number.
        evidencenumber:
          type: string
          title: evidencenumber
          description: Optional parameter. House registration number (eg for house constructions).
        city:
          type: string
          title: city
          description: City name.
        cityarea:
          type: string
          title: cityarea
          description: Optional parametr. City area name.
        zipcode:
          type: string
          title: zipcode
          description: Zip code of the address.
        country:
          type: string
          title: country
          description:
            Country Code, ISO 3166-1 format, subtype ALPHA-2. This means two
            letters in uppercase.
        ruian_reference:
          type: string
          title: ruian_reference
          description: Address reference to the register of territorial identification, addresses and real estate (RUIAN)
          example: '1537GH96'
      required:
        - type
        - city
        - zipcode
        - country
    idcard:
      type: object
      title: idcard
      description: User's id card
      properties:
        type:
          type: string
          title: type
          description: >-
            Id card type code:
              * `ID` - Identity card.
              * `P`  - Passport
              * `DL` - Driving license
              * `IR` - Residence permit
              * `VS` - Visa permit label
              * `PS` - Residential label
              * `IX` - Book with residence permit
              * `IE` - Form with temporary residence
              * `OP` - Identity card – without machine readable zone
              * `CA` - Passport of the Czech Republic resident – without machine readable zone
              * `UNKNOWN` - Unknown id card type
          enum:
            - ID
            - P
            - DL
            - IR
            - VS
            - PS
            - IX
            - IE
            - OP
            - CA
            - UNKNOWN
        description:
          type: string
          title: description
          description: Localized id card type description.
          example: "Občanský průkaz"
        country:
          type: string
          title: country
          description: Country for which is id card valid.
          example: 'CZ'
        number:
          type: string
          title: number
          description: Number of id card.
          example: '123456789'
        valid_to:
          type: string
          title: valid_to
          description: Id card validity.
          example: '2020-01-28'
        issuer:
          type: string
          title: issuer
          description: Office that issued id card.
          example: 'Úřad městské části Praha 4'
        issue_date:
          type: string
          title: issue_date
          description: Date of id card issue.
          example: '2020-01-28'
      required:
        - type
        - country
        - number
    paymentAccounts:
      type: array
      title: paymentAccounts
      description: User's payment account numbers in CZ IBAN format.
      items:
        type: string
        title: IBAN
        description: User's payment account number in CZ IBAN format.
    paymentAccountsDetails:
      type: array
      description: User's payment account number in CZ IBAN format and currency.
      items:
        type: object
        properties:
          iban:
            type: string
            title: iban
            description: User's payment account number in CZ IBAN format.
            example: 'CZ0708000000001019382023'
          currency:
            description: The currency of that payment account
            type: string
            title: currency
            example: 'CZK'

    RequestObjectRequest:
      type: object
      required:
        - txn
        - client_id
        - nonce
        - state
        - acr_value
        - response_type
        - max_age
        - structured_scope
      properties:
        txn:
          description: >
            The txn Claim as defined in [RFC8417] is used in the context of
            this extension to build audit trails across the parties involved in an
            OpenID Connect transaction.
          example: '5fo70547-0f7f-4794-acb0-d959f5a899a6'
          type: string
        client_id:
          description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          type: string
          example: 'D40D25DB-C330-4331-A191-0A4F6CCD17D8'
        nonce:
          description: >-
            String value used to associate a Client session with an ID Token, and to mitigate replay attacks. 
            The value is passed through unmodified from the Authentication Request to the ID Token. 
            Sufficient entropy MUST be present in the nonce values used to prevent attackers from 
            guessing values. For implementation notes, see Section 15.5.2.
          type: string
          example: 'nxrt-084-222_wdutKuOasdj'
        state:
          description: >-
            Opaque value used to maintain state between the request and the callback. 
            Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically 
            binding the value of this parameter with a browser cookie.
          type: string
          example: 'XlwuwppIWL9F32SZDULd'
        acr_values:
          description: >-
            The parameter represents the required authentication level. The application should only request
            values configured in the developer portal (**Enable 2FA by default** switch in configuration).
            
            
            The values determine the level of authentication as well as the possible use of authentication factors.
            The value of ```loa2``` corresponds to one-factor authentication. The value of ```loa3``` corresponds to authentication
            using two independent verification factors (2FA or also SCA).
          type: string
          default: loa3
          enum:
            - loa2
            - loa3
          example: 'loa3'
        response_type:
          type: string
          default: code
          description: Defines return type from OpenID Connect, required in case of remote authorization.
          example: 'code'
        id_token_hint:
          description: >-
            ID Token previously issued by the Authorization Server being passed as a hint about 
            the End-User's current or past authenticated session with the Client. If the End-User 
            identified by the ID Token is logged in or is logged in by the request, then the 
            Authorization Server returns a positive response; otherwise, it SHOULD return an error, 
            such as login_required. When possible, an id_token_hint SHOULD be present when 
            prompt=none is used and an invalid_request error MAY be returned if it is not; 
            however, the server SHOULD respond successfully when possible, even if it is not present. 
            The Authorization Server need not be listed as an audience of the ID Token when 
            it is used as an id_token_hint value.
          type: string
          example: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjdlOGFkZmMzMjU1OTEyNzI0ZDY4NWZmYmIwOThjNDEyIiwidHlwIjoiSldUIn0.eyJuYmYiOjE0OTE3NjUzMjEsImV4cCI6MTQ5MTc2'
        max_age:
          type: number
          description: Value in seconds. Expiration of request object on client's or server's side. The documents will be removed from the server after expiration.
          example: 3600
        ui_locales:
          description: >-
            End-User's preferred languages and scripts for the user interface, represented as a 
            space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. 
            For instance, the value "fr-CA fr en" represents a preference for French as spoken in 
            Canada, then French (without a region designation), followed by English 
            (without a region designation). An error SHOULD NOT result if some or all of the 
            requested locales are not supported by the OpenID Provider.
          type: string
          example: 'fr-CA.UTF-8'
        scope:
          description: OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. See Sections 5.4 and 11 for additional scope values defined by this specification.
          type: string
          example: 'openid profile.name profile.addresses'
        structured_scope:
          $ref: '#/components/schemas/structured_scope'

    structured_scope:
      description: Scope as object which end-user will see on consent screen and for which has to give explicit consent by using. Only one of documentObject or documentObjects can be used.
      type: object
      properties:
        certificateProviderName:
          type: string
          description: Name of provider used for qualified signature
          example: 'eIdentity a.s.'
        signObject:
          $ref: '#/components/schemas/signObject'
        documentObject:
          $ref: '#/components/schemas/documentObject'
        documentObjects:
          $ref: '#/components/schemas/documentObjects'

    RequestObjectResponse:
      type: object
      required:
        - iss
        - aud
        - exp
        - request_uri
      properties:
        request_uri:
          description: >-
            This parameter enables OpenID Connect requests to be passed by reference, rather than by value.
            The `request_uri` value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.
          type: string
          format: uri
          example: 'https://rp.example.com/request/13CACDFD-884C-4E57-B78D-90B69A96C86A.jwt'
        exp:
          type: integer
          format: int64
          description: Max time to live in seconds, after this time upload_uri or upload_uris expire.
          example: '1665671516'

    signObject:
      type: object
      required:
        - fields
        - signObject_hash
      properties:
        fields:
          type: array
          items:
            type: object
            required:
              - key
              - value
              - priority
            properties:
              key:
                type: string
                description: Key for value, can be displayed to end-user as label.
                example: 'Consent'
              value:
                type: string
                description: Value for user authorization, must be displayed to end-user
                example: 'I consent with sending marketing messages to my email and telephone'
              priority:
                type: number
                uniqueItems: true
                description: Order of fields by which it should be display at IdP on authorization screen. Order starts by number 1, which is the highest priority (and therefore should be displayed as first)
                example: 1
        signObject_hash:
          description: Hash of the signObject constructed by the SHA512 algorithm from the string created by composing the key and value values of individual fields sorted by priority.
          type: string
          example: 'b2f50bbdeffbb3f0a34e426eee34f006fbbeebe001921eef46eeeeda3a9b27bde1d8b24b95b5db56a9ab27fa7157c0e8cb9bd7ef61d574f3c68d03eb127ff402'

    documentObject:
      type: object
      required:
        - document_id
        - document_hash
        - document_title
        - document_subject
        - document_language
        - document_author
        - document_pages
        - document_created
        - document_size
        - document_read_by_enduser
        - document_uri
      properties:
        document_id:
          description: >-
            Id of document included in custom PDF metadata. This attribute must be included in PDF metadata under document-id key.
          type: string
          example: '7159534b-3b88-4f29-866b-9e83489d3053'
        document_hash:
          type: string
          description: Cryptographiclly save hash used for unique identification of document used for binding consent with signature with explicit document. Used hash algorithm is SHA-512 (OID 2.16.840.1.101.3.4.2.3]
          example: 'a93e305306c7a52ac2ccc55b83f197ea8e02b0ce6b317f53ae8e038586f88197'
        document_title:
          type: string
          description: Title of document, can be empty string
          example: 'Smlouva o smlouvě'
        document_subject:
          type: string
          description: Subject of document, can be empty string
          example: 'Smlouva s společností ACME'
        document_language:
          type: string
          description: Language of document. Defined as a LCID (ISO-639 language code, dot, ISO-3166 country code), can be empty string
          example: cs.CZ
        document_created:
          type: string
          description: Date of creation of document
          format: 'date-time'
          example: '2020-06-24T08:54:11+00:00'
        document_author:
          type: string
          description: Author of document, can be empty string
          example: 'Orange SK'
        document_size:
          type: integer
          description: Size of document in bytes
          example: 1250000
        document_pages:
          type: string
          description: Number of pages of the signed document
          example: '15'
        document_read_by_enduser:
          type: boolean
          description: Flag distiguishing if client has already read document
          example: true
        document_uri:
          type: string
          format: uri
          description: Temporary URI designed to be able to display the document in the IDP authorization flow
          example: 'https://rp.net/documents?document_id=7e766e94-eb62-11ea-adc1-0242ac120002'

    multiDocumentObject:
      type: object
      required:
        - document_id
        - document_priority
        - document_hash
        - document_title
        - document_subject
        - document_language
        - document_author
        - document_pages
        - document_created
        - document_size
        - document_read_by_enduser
        - document_uri
      properties:
        document_id:
          description: >-
            Id of document included in custom PDF metadata. This attribute must be included in PDF metadata under document-id key.
          type: string
          example: '7159534b-3b88-4f29-866b-9e83489d3053'
        document_priority:
          type: integer
          description: Priority of document for consent screen, used in ascending order. In this order IdP MUST display documents to endUser. Number must be unique in set of documents.
          example: 1
        document_hash:
          type: string
          description: Cryptographiclly save hash used for unique identification of document used for binding consent with signature with explicit document. Used hash algorithm is SHA-512 (OID 2.16.840.1.101.3.4.2.3]
          example: 'a93e305306c7a52ac2ccc55b83f197ea8e02b0ce6b317f53ae8e038586f88197'
        document_title:
          type: string
          description: Title of document, can be empty string
          example: 'Smlouva o smlouvě'
        document_subject:
          type: string
          description: Subject of document, can be empty string
          example: 'Smlouva s společností ACME'
        document_language:
          type: string
          description: Language of document. Defined as a LCID (ISO-639 language code, dot, ISO-3166 country code), can be empty string
          example: cs.CZ
        document_created:
          type: string
          description: Date of creation of document
          format: 'date-time'
          example: '2020-06-24T08:54:11+00:00'
        document_author:
          type: string
          description: Author of document, can be empty string
          example: 'Orange SK'
        document_size:
          type: integer
          description: Size of document in bytes
          example: 1250000
        document_pages:
          type: string
          description: Number of pages of the signed document
          example: '15'
        document_read_by_enduser:
          type: boolean
          description: Flag distiguishing if client has already read document
          example: true
        document_uri:
          type: string
          format: uri
          description: Temporary URI designed to be able to display the document in the IDP authorization flow
          example: 'https://rp.net/documents?document_id=7e766e94-eb62-11ea-adc1-0242ac120002'

    documentObjects:
      type: object
      required:
        - envelope_name
        - envelope_hash
        - documents
      properties:
        envelope_name:
          type: string
          description: Encapsulating name of bulk of documents. MUST be less or equal than 25 characters. Should be unique for given client_id.
        envelope_hash:
          type: string
          description: Hash of all hashes from sent documents. Calculated as SHA-512(doc1_hash+doc2_hash+...+docn_hash), n <11
        documents:
          type: array
          items:
            $ref: '#/components/schemas/multiDocumentObject'

    AuthorizationIDToken:
      externalDocs:
        description: '[OpenID.Core ID Token] 2 ID Token'
        url: 'https://openid.net/specs/openid-connect-core-1_0.html#IDToken'
      description: >-
        The primary extension that OpenID Connect makes to OAuth 2.0 to enable End-Users to be Authenticated is the ID Token data structure.
        The ID Token is a security token that contains Claims about the Authentication of an End-User by an Authorization Server when using a Client, and potentially other requested Claims.
        The ID Token is represented as a JSON Web Token (JWT) [JWT].
      type: object
      required:
        - iss
        - sub
        - aud
        - exp
        - iat
        - auth_time
        - nonce
        - acr
        - amr
        - jti
        - structured_scope
      properties:
        iss:
          type: string
          description: Issuer Identifier, as specified in Section 2 of [OpenID.Core].
        sub:
          type: string
          description: Subject Identifier, as specified in Section 2 of [OpenID.Core].
        idcard_hashes:
          type: array
          items: 
            type: string
          description: >-
            This parameter contains a string hash consisting of the document type and the user document. The document type is a String representing one of the values from the code list for the idcards [] .type element in the endpoint /profile. UNKNOWN type is not allowed.


            Possible types (same as idcards.type entity):

              * `ID` - Identity card.
              * `P`  - Passport
              * `DL` - Driving license
              * `IR` - Residence permit
              * `VS` - Visa permit label
              * `PS` - Residential label
              * `IX` - Book with residence permit
              * `IE` - Form with temporary residence
              * `OP` - Identity card – without machine readable zone
              * `CA` - Passport of the Czech Republic resident – without machine readable zone
            And the document number that was last verified in ROB.


            Example: SHA2-512 ("ID0123443211")


            The required hash algorithm is SHA2-512.

          example:
            - "6f3e1ec486a610481639a79d7e1b0c74b7866cfc78adf48ba25b9c68a4bdaa66d13d7621b678ef756a93cc264ca24fec4854bb66fae7649ca30a775514f223d7"
            - "6f3e1ec486a610481639a79d7e1b0c74b7866cfc78adf48ba25b9c68a4bdaa66d13d7621b32112126a93cc264ca24fec4854bb66fae7649ca30a775514f223d7"
        aud:
          type: string
          description: Audience(s), as specified in Section 2 of [OpenID.Core].
        exp:
          type: number
          format: int64
          description: >-
            Expiration time on or after which the ID Token MUST NOT be accepted for processing. The processing of this parameter requires that the current date/time MUST be before 
            the expiration date/time listed in the value. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. 
            Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time. See RFC 3339 [RFC3339] for details regarding 
            date/times in general and UTC in particular.
          example: 234567890
        iat:
          type: number
          format: int64
          description: >-
            Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
          example: 23457890
        auth_time:
          type: number
          format: int64
          description: >-
            Time when the End-User authentication occurred. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time. 
            When a max_age request is made or when auth_time is requested as an Essential Claim, then this Claim is REQUIRED; otherwise, its inclusion is OPTIONAL. (The auth_time Claim 
            semantically corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] auth_time response parameter.)
          example: 23456789
        nonce:
          type: string
          description: >-
            String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication 
            Request to the ID Token. If present in the ID Token, Clients MUST verify that the nonce Claim Value is equal to the value of the nonce parameter sent in the Authentication Request. 
            If present in the Authentication Request, Authorization Servers MUST include a nonce Claim in the ID Token with the Claim Value being the nonce value sent in the Authentication Request. 
            Authorization Servers SHOULD perform no other processing on nonce values used. The nonce value is a case sensitive string.
          example: 'nxrt-084-222_wdutKuOasdj'
        acr:
          type: string
          enum:
            - loa3
            - loa2
          description: >-
            The values determine the level of authentication as well as the possible use of authentication factors.

            The value of ```loa2``` corresponds to one-factor authentication. The value of ```loa3``` corresponds to authentication using two independent verification factors (2FA or also SCA).
          example: 'loa3'
        amr:
          type: array
          items:
            type: string
            example: face
            enum:
              - face
              - fpt
              - geo
              - hwk
              - iris
              - kba
              - mca
              - mfa
              - otp
              - pin
              - pwd
              - rba
              - retina
              - sc
              - sms
              - swk
              - tel
              - user
              - wbm
              - wia
          description: >-
            Authentication Methods References. JSON array of strings that are identifiers for authentication methods used in the authentication. For instance, values might indicate that both password and 
            OTP authentication methods were used. The definition of particular values to be used in the amr Claim is beyond the scope of this specification. Parties using this claim will need to agree 
            upon the meanings of the values used, which may be context-specific. The amr value is an array of case sensitive strings.
            
            In case it is not possible to identify used biometrics in mobile device, use ```fpt```.
            
            The following is a list of Authentication Method Reference values defined by this specification:

            * face -
                Biometric authentication [RFC4949] using facial recognition

            * fpt -
                Biometric authentication [RFC4949] using a fingerprint

            * geo -
                Use of geolocation information for authentication, such as that provided by [W3C.REC-geolocation-API-20161108]

            * hwk -
                Proof-of-possession (PoP) of a hardware-secured key. See Appendix C of [RFC4211] for a discussion on PoP.

            * iris -
                Biometric authentication [RFC4949] using an iris scan

            * kba -
                Knowledge-based authentication [NIST.800-63-2] [ISO29115]

            * mca -
                Multiple-channel authentication [MCA].  The authentication involves communication over more than one distinct communication
                channel.  For instance, a multiple-channel authentication might involve both entering information into a workstation's browser and
                providing information on a telephone call to a pre-registered number.

            * mfa -
                Multiple-factor authentication [NIST.800-63-2]  [ISO29115].  When this is present, specific authentication methods used may also be included.

            * otp -
                One-time password [RFC4949].  One-time password specifications that this authentication method applies to include [RFC4226] and [RFC6238].

            * pin -
                Personal Identification Number (PIN) [RFC4949] or pattern (not restricted to containing only numbers) that a user enters to unlock a key on the device.  This mechanism should have a way to
                deter an attacker from obtaining the PIN by trying repeated guesses.

            * pwd -
                Password-based authentication [RFC4949]

            * rba -
                Risk-based authentication [JECM]

            * retina -
                Biometric authentication [RFC4949] using a retina scan

            * sc -
                Smart card [RFC4949]

            * sms -
                Confirmation using SMS [SMS] text message to the user at a registered number

            * swk -
                Proof-of-possession (PoP) of a software-secured key. See Appendix C of [RFC4211] for a discussion on PoP.

            * tel -
                Confirmation by telephone call to the user at a registered number. This authentication technique is sometimes also referred to as "call back" [RFC4949].

            * user -
                User presence test.  Evidence that the End-User is present and interacting with the device.  This is sometimes also referred to as "test of user presence" [W3C.WD-webauthn-20170216].

            * vbm -
                Biometric authentication [RFC4949] using a voiceprint

            * wia -
                Windows integrated authentication [MSDN]
          example: ['face', 'user']
        jti:
          type: string
          description: >-
            The `jti` (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be
            accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well.  The `jti` claim can be used
            to prevent the JWT from being replayed.  The `jti` value is a case-sensitive string.
          example: 95E3440A-C986-4E8B-9678-605F9B2FE7C5
        structured_scope:
          $ref: '#/components/schemas/structured_scope'

    userInfo:
      description: Provide basic information about End-User
      properties:
        sub:
          type: string
          description: Identifier for the End-User at the Issuer.
          example: '23f1ac00-5d54-4169-a288-794ae2ead0c4'
        txn:
          type: string
          description: >-
            The txn Claim as defined in [RFC8417] is used in the context of
            this extension to build audit trails across the parties involved in an
            OpenID Connect transaction.
          example: '31470547-0f7f-4794-acb0-d959f5a711a5'
        verified_claims:
          $ref: '#/components/schemas/verified_claims_userinfo'
        name:
          $ref: '#/components/schemas/name'
        given_name:
          $ref: '#/components/schemas/given_name'
        family_name:
          $ref: '#/components/schemas/family_name'
        middle_name:
          $ref: '#/components/schemas/middle_name'
        nickname:
          $ref: '#/components/schemas/nickname'
        preferred_username:
          $ref: '#/components/schemas/preferred_username'
        email:
          $ref: '#/components/schemas/email'
        email_verified:
          $ref: '#/components/schemas/email_verified'
        gender:
          $ref: '#/components/schemas/gender'
        birthdate:
          $ref: '#/components/schemas/birthdate'
        zoneinfo:
          $ref: '#/components/schemas/zoneinfo'
        locale:
          $ref: '#/components/schemas/locale'
        phone_number:
          $ref: '#/components/schemas/phone_number'
        phone_number_verified:
          $ref: '#/components/schemas/phone_number_verified'
        updated_at:
          $ref: '#/components/schemas/updated_at'
      required:
        - sub
        - txn
        - verified_claims

    profile:
      description: Provide detailed information about End-User
      properties:
        sub:
          type: string
          description: Identifier for the End-User at the Issuer.
          example: '23f1ac00-5d54-4169-a288-794ae2ead0c4'
        txn:
          type: string
          description: >-
            The txn Claim as defined in [RFC8417] is used in the context of
            this extension to build audit trails across the parties involved in an
            OpenID Connect transaction.
          example: '31470547-0f7f-4794-acb0-d959f5a711a5'
        verified_claims:
          $ref: '#/components/schemas/verified_claims'
        title_prefix:
          $ref: '#/components/schemas/title_prefix'
        title_suffix:
          $ref: '#/components/schemas/title_suffix'
        given_name:
          $ref: '#/components/schemas/given_name'
        family_name:
          $ref: '#/components/schemas/family_name'
        middle_name:
          $ref: '#/components/schemas/middle_name'
        gender:
          $ref: '#/components/schemas/gender'
        birthdate:
          $ref: '#/components/schemas/birthdate'
        birthnumber:
          $ref: '#/components/schemas/birthnumber'
        age:
          $ref: '#/components/schemas/age'
        majority:
          $ref: '#/components/schemas/majority'
        date_of_death:
          $ref: '#/components/schemas/date_of_death'
        birthplace:
          $ref: '#/components/schemas/birthplace'
        birthcountry:
          $ref: '#/components/schemas/birthcountry'
        primary_nationality:
          $ref: '#/components/schemas/primary_nationality'
        nationalities:
          $ref: '#/components/schemas/nationalities'
        maritalstatus:
          $ref: '#/components/schemas/maritalstatus'
        addresses:
          $ref: '#/components/schemas/addresses'
        idcards:
          $ref: '#/components/schemas/idcards'
        email:
          $ref: '#/components/schemas/email'
        phone_number:
          $ref: '#/components/schemas/phone_number'
        pep:
          $ref: '#/components/schemas/pep'
        limited_legal_capacity:
          $ref: '#/components/schemas/limited_legal_capacity'
        paymentAccounts:
          $ref: '#/components/schemas/paymentAccounts'        
        paymentAccountsDetails:
          $ref: '#/components/schemas/paymentAccountsDetails'
        updated_at:
          $ref: '#/components/schemas/updated_at'
      required:
        - sub
        - txn
        - verified_claims

    OIDCConfiguration:
      description: >-
        It includes links to several endpoints (e.g. /oauth2/token) and exposes information on supported signature algorithms among others.
      type: object
      required:
        - issuer
        - authorization_endpoint
        - token_endpoint
        - introspection_endpoint
        - userinfo_endpoint
        - profile_endpoint
        - registration_endpoint
        - revocation_endpoint
        - jwks_uri
        - scopes_supported
        - subject_types_supported
        - response_types_supported
        - id_token_signing_alg_values_supported
        - claims_supported
        - token_endpoint_auth_methods_supported
        - healthcheck_endpoint
        - acr_values_supported
        - id_token_encryption_alg_values_supported
        - id_token_encryption_enc_values_supported
        - userinfo_signing_alg_values_supported
        - userinfo_encryption_alg_values_supported
        - userinfo_encryption_enc_values_supported
        - profile_signing_alg_values_supported
        - profile_encryption_alg_values_supported
        - profile_encryption_enc_values_supported
        - request_object_signing_alg_values_supported
        - request_object_encryption_alg_values_supported
        - request_object_encryption_enc_values_supported
        - introspection_endpoint_auth_methods_supported
        - introspection_endpoint_auth_signing_alg_values_supported
        - token_endpoint_auth_signing_alg_values_supported
      properties:
        issuer:
          type: string
          format: uri
          description: URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier. If Issuer discovery is supported (see Section 2), this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
          example: https://idp.example.com
        authorization_endpoint:
          type: string
          format: uri
          description: URL of the OP's OAuth 2.0 Authorization Endpoint [OpenID.Core].
          example: https://idp.example.com/auth
        token_endpoint:
          type: string
          format: uri
          description: URL of the OP's OAuth 2.0 Token Endpoint [OpenID.Core]. This is REQUIRED unless only the Implicit Flow is used.
          example: https://idp.example.com/token
        introspection_endpoint:
          type: string
          format: uri
          description: URL of the OP's OAuth 2.0 Introspection Endpoint [OpenID.Core]. Returns meta information surrounding the token.
          example: https://idp.example.com/token-info
        userinfo_endpoint:
          type: string
          format: uri
          description: URL of the OP's UserInfo Endpoint [OpenID.Core]. This URL MUST use the https scheme and MAY contain port, path, and query parameter components.
          example: https://idp.example.com/userinfo
        profile_endpoint:
          type: string
          format: uri
          description: URL of the OP's Profile Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components.
          example: https://idp.example.com/profile
        ros_endpoint:
          type: string
          format: uri
          description: URL of the OP's ROS Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components.
          example: https://idp.example.com/ros
        authorize_endpoint:
          type: string
          format: uri
          description: URL of the OP's Authorize Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components.
          example: https://idp.example.com/authorize
        revocation_endpoint:
          type: string
          format: uri
          description: URL of the IDP's Token Revocation endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components.
          example: https://idp.example.com/revoke
        jwks_uri:
          type: string
          format: uri
          description: URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
          example: https://idp.example.com/.well-known/jwks
        registration_endpoint:
          type: string
          format: uri
          description: URL of the OP's Dynamic Client Registration Endpoint [OpenID.Registration].
          example: https://idp.example.com/register
        healthcheck_endpoint:
          type: string
          format: uri
          description: URL of the OP's HealthCheck Endpoint. This contains the current status and outage information.
          example: https://idp.example.com/healthcheck
        scopes_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used, although those defined in [OpenID.Core] SHOULD be listed, if supported.
          example: [openid, profile.email]
        response_types_supported:
          type: array
          items:
            type: string
            enum:
              - code
          description: JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
          example: [code]
        response_modes_supported:
          type: array
          items:
            type: string
            enum:
              - query
          description: JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports, as specified in OAuth 2.0 Multiple Response Type Encoding Practices [OAuth.Responses]. If omitted, the default for Dynamic OpenID Providers is ["query", "fragment"].
          example: ['query']
        grant_types_supported:
          type: array
          items:
            type: string
            enum:
              - authorization_code
              - refresh_token
          description: JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports. Dynamic OpenID Providers MUST support the authorization_code Grant Type values and MAY support other Grant Types. If omitted, the default value is ["authorization_code"].
          example: ['authorization_code', 'refresh_token']
        acr_values_supported:
          type: array
          items:
            type: string
            enum:
              - loa3
              - loa2
            example: ['loa3']
          description:
            JSON array containing a list of the Authentication Context Class References respective that possible verification levels this OP supports.

            The values determine the level of authentication as well as the possible use of authentication factors. The value of ```loa2``` corresponds
            to one-factor authentication. The value of ```loa3``` corresponds to authentication using two independent verification factors (2FA or also SCA).

        subject_types_supported:
          type: array
          items:
            type: string
            enum:
              - pairwise
              - public
          description: JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
          example: ['pairwise']
        id_token_signing_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWSAlg'
          description: JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT]. The value none MAY be supported, but MUST NOT be used unless the Response Type used returns no ID Token from the Authorization Endpoint (such as when using the Authorization Code Flow).
          example: [ES512, PS512]
        id_token_encryption_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEAlg'
          description: JSON array containing a list of the JWE encryption algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT].
          example: [RSA-OAEP, RSA-OAEP-256]
        id_token_encryption_enc_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEEnc'
          description: JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT].
          example: [A256GCM]
        userinfo_signing_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWSAlg'
          description: JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]. The value none MAY be included.
          example: [ES512, PS512]
        userinfo_encryption_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEAlg'
          description: JSON array containing a list of the JWE [JWE] encryption algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
          example: [RSA-OAEP, RSA-OAEP-256]
        userinfo_encryption_enc_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEEnc'
          description: JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
          example: [A256GCM]
        profile_signing_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWSAlg'
          description: JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]. The value none MAY be included.
          example: [ES512, PS512]
        profile_encryption_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEAlg'
          description: JSON array containing a list of the JWE [JWE] encryption algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
          example: [RSA-OAEP, RSA-OAEP-256]
        profile_encryption_enc_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEEnc'
          description: JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
          example: [A256GCM]
        request_object_signing_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWSAlg'
          description: JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). Servers SHOULD support none and RS256.
          example: [ES512, PS512]
        request_object_encryption_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEAlg'
          description: JSON array containing a list of the JWE encryption algorithms (alg values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference.
          example: [RSA-OAEP, RSA-OAEP-256]
        request_object_encryption_enc_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWEEnc'
          description: JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference.
          example: [A256GCM]
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
            enum:
              - private_key_jwt
          description: >-
            JSON array containing a list of Client Authentication methods supported by this Token Endpoint.
            Option `private_key_jwt` is described in Section 9 of OpenID Connect Core 1.0 [OpenID.Core].
            Other authentication methods MAY be defined by extensions.
          example: [private_key_jwt]
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            $ref: '#/components/schemas/JWSAlg'
          description: JSON array containing a list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT [JWT] used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. Servers SHOULD support RS256. The value none MUST NOT be used.
          example: [ES512, PS512]
        introspection_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
            enum:
              - client_secret_post, client_secret_jwt, private_key_jwt
          description: JSON array containing a list of client authentication methods supported by this introspection endpoint. If omitted, the set of supported authentication methods MUST be determined by other means.
          example: [client_secret_post, client_secret_jwt, private_key_jwt]
        introspection_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
            enum:
              - HS256, HS512, RS256, RS512, PS512, ES512
            description: JSON array containing a list of the JWS signing algorithms ("alg" values) supported by the introspection endpoint for the signature on the JWT [JWT] used to authenticate the client at the introspection endpoint. No default algorithms are implied if this entry is omitted. The value "none" MUST NOT be used.
            example: [HS256, HS512, RS256, RS512, PS512, ES512]
        display_values_supported:
          type: array
          items:
            type: string
            enum:
              - page
              - popup
              - touch
          description: >-
            JSON array containing a list of the display parameter values that the OpenID Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core].
          example: [page, touch]
        service_documentation:
          type: string
          format: uri
          description: URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider. In particular, if the OpenID Provider does not support Dynamic Client Registration, then information on how to register Clients needs to be provided in this documentation.
          example: https://idp.example.com/docs
        claims_locales_supported:
          type: array
          items:
            type: string
            format: BCP47
          description: Languages and scripts supported for values in Claims being returned, represented as a JSON array of BCP47 [RFC5646] language tag values. Not all languages and scripts are necessarily supported for all Claim values.
          example: [en-CA, en]
        ui_locales_supported:
          type: array
          items:
            type: string
            format: BCP47
          description: Languages and scripts supported for the user interface, represented as a JSON array of BCP47 [RFC5646] language tag values.
          example: [cs, en-US, en]
        claims_parameter_supported:
          type: boolean
          default: false
          description: Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support. If omitted, the default value is false.
          example: false
        request_parameter_supported:
          type: boolean
          default: false
          description: Boolean value specifying whether the OP supports use of the request parameter, with true indicating support. If omitted, the default value is false.
          example: false
        request_uri_parameter_supported:
          type: boolean
          default: true
          description: Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support. If omitted, the default value is true.
          example: true
        require_request_uri_registration:
          type: boolean
          default: false
          description: Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter. Pre-registration is REQUIRED when the value is true. If omitted, the default value is false.
          example: false
        op_policy_uri:
          type: string
          format: uri
          description: URL that the OpenID Provider provides to the person registering the Client to read about the OP's requirements on how the Relying Party can use the data provided by the OP. The registration process SHOULD display this URL to the person registering the Client if it is given.
          example: https://idp.example.com/policy
        op_tos_uri:
          type: string
          format: uri
          description: URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service. The registration process SHOULD display this URL to the person registering the Client if it is given.
          example: https://idp.example.com/tos
        backchannel_logout_supported:
          type: boolean
          description: Indicates if back-channel logout is supported. Back-channel logout needs to be registered during dynamic client registration.
        claims_supported:
          type: array
          items:
            type: string
          description: JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.

    ClientSettings:
      type: object
      required:
        - redirect_uris
        - request_uris
        - require_auth_time
        - default_max_age
        - tos_uri
        - logo_uri
        - jwks_uri
        - client_name
        - scope
      properties:
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
          example:
            - 'https://client.example.com/callback'
            - 'https://rp.example.com/callback'
          description: >-
            Array of Redirection URI values used by the Client. 
            One of these registered Redirection URI values MUST exactly match the redirect_uri parameter value used in each Authorization Request, with the matching performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison).
        response_types:
          type: array
          items:
            type: string
            enum:
              - code
          description: >-
            JSON array containing a list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. 
            If omitted, the default is that the Client will use only the `code` Response Type.
        grant_types:
          type: array
          items:
            type: string
            enum:
              - authorization_code
              - refresh_token
          description: >-
            JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. 


            The Grant Type values used by OpenID Connect are:


            * `authorization_code`: The Authorization Code Grant Type described in OAuth 2.0 Section 4.1.

            * `refresh_token`: The Refresh Token Grant Type described in OAuth 2.0 Section 6. 


            If omitted, the default is that the Client will use only the authorization_code Grant Type.
        application_type:
          type: string
          default: web
          enum:
            - web
          description: >-
            Kind of the application. 
            The default, if omitted, is web. 
            Only `web` is allowed for COBS purposes.


            Spec: The defined values are native or web. 
            Web Clients using the OAuth Implicit Grant Type MUST only register URLs using the https scheme as redirect_uris; they MUST NOT use localhost as the hostname. 
            Native Clients MUST only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname. 
            Authorization Servers MAY place additional constraints on Native Clients. 
            Authorization Servers MAY reject Redirection URI values using the http scheme, other than the localhost case for Native Clients. 
            The Authorization Server MUST verify that all the registered redirect_uris conform to these constraints. 
            This prevents sharing a Client ID across different types of Clients.
        contacts:
          type: array
          items:
            type: string
            format: email
          example:
            - 've7jtb@example.com'
            - 'mary@example.com'
          description: >-
            Array of e-mail addresses of people responsible for this Client.
            This might be used by some providers to enable a Web user interface to modify the Client information.
        client_name:
          type: string
          example: My Application
          description: >-
            Name of the Client to be presented to the End-User.
            If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
        client_type:
          type: string
          description: >-
            Client company type:
              * `bank` - Banks, bank branches of foreign banks
              * `financial_comp` - Financial company licensed by the CNB: insurance companies, savings banks…
              * `aml_comp` - Non-financial company, company with AML legal obligations: bookmakers, real estate office…
              * `public_ent` - Public legal entity: municipalities, contributory companies
              * `nonprofit_org` - Non-governmental non-profit organization
              * `other_comp` - Other companies, cooperatives, unions
          enum:
            - bank
            - financial_comp
            - aml_comp
            - public_ent
            - nonprofit_org
            - other_comp
          example: bank
        client_provider_name:
          type: string
          example: My Company
          description: >-
            Name of the Client provider organization or company to be presented to the End-User.
            If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
        tax_number:
          type: string
          description: Identification number of service provider.
          example: '45244782'
        logo_uri:
          type: string
          format: uri
          example: https://client.example.com/logo.png
          description: >-
            URL that references a logo for the Client application.
            If present, the server SHOULD display this image to the End-User during approval.
            The value of this field MUST point to a valid image file.
            If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
        client_uri:
          type: string
          format: uri
          example: https://client.example.com
          description: >-
            URL of the home page of the Client.
            The value of this field MUST point to a valid Web page.
            If present, the server SHOULD display this URL to the End-User in a followable fashion.
            If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
        policy_uri:
          type: string
          format: uri
          example: https://client.example.com/policy
          description: >-
            URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.
            The value of this field MUST point to a valid web page.
            The OpenID Provider SHOULD display this URL to the End-User if it is given.
            If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
        tos_uri:
          type: string
          format: uri
          example: https://client.example.com/tos
          description: >-
            URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.
            The value of this field MUST point to a valid web page.
            The OpenID Provider SHOULD display this URL to the End-User if it is given.
            If desired, representation of this Claim in different languages and scripts is represented as described in Section 2.1.
        jwks_uri:
          type: string
          format: uri
          example: https://client.example.com/my_public_keys.jwks
          description: >-
            URL for the Client's JSON Web Key Set [JWK] document.
            If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client.
            The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client.
            When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.
            Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure.
            The JWK x5c parameter MAY be used to provide X.509 representations of keys provided.
            When used, the bare key values MUST still be present and MUST match those in the certificate.
        sector_identifier_uri:
          type: string
          format: uri
          example: https://other.example.net/file_of_redirect_uris.json
          description: >-
            URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.
            The URL references a file with a single JSON array of redirect_uri values.
            Please see Section 5. 
            Providers that use pairwise sub (subject) values SHOULD utilize the sector_identifier_uri value provided in the Subject Identifier calculation for pairwise identifiers.
        subject_type:
          type: string
          enum:
            - pairwise
            - public
          example: pairwise
          description: >-
            subject_type requested for responses to this Client.
            The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server.
            Valid types include pairwise and public.
        id_token_signed_response_alg:
          allOf: [ $ref: '#/components/schemas/JWSAlg' ]
          description: >-
            JWS alg algorithm [JWA] REQUIRED for signing the ID Token issued to this Client.
            The value none MUST NOT be used as the ID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow).
            The default, if omitted, is RS256.
            The public key for validating the signature is provided by retrieving the JWK Set referenced by the jwks_uri element from OpenID Connect Discovery 1.0 [OpenID.Discovery].
          example: PS512
        id_token_encrypted_response_alg:
          allOf: [ $ref: '#/components/schemas/JWEAlg' ]
          description: >-
            JWE alg algorithm [JWA] REQUIRED for encrypting the ID Token issued to this Client.
            If this is requested, the response will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT].
            The default, if omitted, is that no encryption is performed.
          example: RSA-OAEP
        id_token_encrypted_response_enc:
          allOf: [ $ref: '#/components/schemas/JWEEnc' ]
          description: >-
            JWE enc algorithm [JWA] REQUIRED for encrypting the ID Token issued to this Client.
            If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256.
            When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg MUST also be provided.
          example: 'A256GCM'
        userinfo_signed_response_alg:
          allOf: [ $ref: '#/components/schemas/JWSAlg' ]
          description: >-
            JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses.
            If this is specified, the response will be JWT [JWT] serialized, and signed using JWS.
            The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
          example: PS512
        userinfo_encrypted_response_alg:
          allOf: [ $ref: '#/components/schemas/JWEAlg' ]
          description: >-
            JWE [JWE] alg algorithm [JWA] REQUIRED for encrypting UserInfo Responses.
            If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT].
            The default, if omitted, is that no encryption is performed.
          example: RSA-OAEP
        userinfo_encrypted_response_enc:
          allOf: [ $ref: '#/components/schemas/JWEEnc' ]
          description: >-
            JWE enc algorithm [JWA] REQUIRED for encrypting UserInfo Responses.
            If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256.
            When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg MUST also be provided.
          example: 'A256GCM'
        profile_signed_response_alg:
          allOf: [ $ref: '#/components/schemas/JWSAlg' ]
          description: >-
            JWS alg algorithm [JWA] REQUIRED for signing Profile Responses.
            If this is specified, the response will be JWT [JWT] serialized, and signed using JWS.
            The default, if omitted, is for the Profile Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
          example: PS512
        profile_encrypted_response_alg:
          allOf: [ $ref: '#/components/schemas/JWEAlg' ]
          description: >-
            JWE [JWE] alg algorithm [JWA] REQUIRED for encrypting Profile Responses.
            If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT].
            The default, if omitted, is that no encryption is performed.
          example: RSA-OAEP
        profile_encrypted_response_enc:
          allOf: [ $ref: '#/components/schemas/JWEEnc' ]
          description: >-
            JWE enc algorithm [JWA] REQUIRED for encrypting Profile Responses.
            If profile_encrypted_response_alg is specified, the default for this value is A128CBC-HS256.
            When profile_encrypted_response_enc is included, profile_encrypted_response_alg MUST also be provided.
          example: 'A256GCM'
        request_object_signing_alg:
          allOf: [ $ref: '#/components/schemas/JWSAlg' ]
          description: >-
            JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP.
            All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
            Request Objects are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core].
            This algorithm MUST be used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).
            Servers SHOULD support RS256.
            The value none MAY be used.
            The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.
          example: PS512
        request_object_encryption_alg:
          allOf: [ $ref: '#/components/schemas/JWEAlg' ]
          description: >-
            JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request Objects sent to the OP.
            This parameter SHOULD be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned.
            The RP MAY still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. 
            If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. 
            The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.
          example: RSA-OAEP
        request_object_encryption_enc:
          allOf: [ $ref: '#/components/schemas/JWEEnc' ]
          description: >-
            JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request Objects sent to the OP. 
            If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. 
            When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided.
          example: 'A256GCM'
        token_endpoint_auth_method:
          type: string
          enum:
            - private_key_jwt
          description: >-
            Requested Client Authentication method for the Token Endpoint. 
            Only `private_key_jwt` is allowed for COBS purposes.


            The options are described in Section 9 of OpenID Connect Core 1.0 [OpenID.Core]. 
            Other authentication methods MAY be defined by extensions. 
            If omitted, the default is client_secret_basic -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749].
          example: private_key_jwt
        token_endpoint_auth_signing_alg:
          allOf: [ $ref: '#/components/schemas/JWSAlg' ]
          description: >-
            JWS [JWS] alg algorithm [JWA] that MUST be used for signing the JWT [JWT] used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. 
            All Token Requests using these authentication methods from this Client MUST be rejected, if the JWT is not signed with this algorithm. 
            Servers SHOULD support RS256. 
            The value none MUST NOT be used. 
            The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.
          example: PS512
        default_max_age:
          type: number
          format: int64
          example: 3600
          description: >-
            Default Maximum Authentication Age. 
            Specifies that the End-User MUST be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. 
            The max_age request parameter overrides this default value. 
            If omitted, no default Maximum Authentication Age is specified.
        require_auth_time:
          type: boolean
          default: false
          description: >-
            Boolean value specifying whether the auth_time Claim in the ID Token is REQUIRED.
            It is REQUIRED when the value is true.
            (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter described in Section 5.5.1 of OpenID Connect Core 1.0 [OpenID.Core].)
            If omitted, the default value is false.
        default_acr_values:
          type: array
          items:
            type: string
            enum:
              - loa3
              - loa2
          description: >-
            Supported requested Authentication Context Class Reference values.
            The parameter represents supported authentication level values.
            The values determine the level of authentication as well as the possible use of authentication factors.
            The value of ```loa2``` corresponds to one-factor authentication. The value of ```loa3``` corresponds to authentication using two
            independent verification factors (2FA or also SCA).
          example: ['loa2', 'loa3']
        initiate_login_uri:
          type: string
          format: uri
          example: https://client.example.com/login
          description: >-
            URI using the https scheme that a third party can use to initiate a login by the RP, as specified in Section 4 of OpenID Connect Core 1.0 [OpenID.Core].
            The URI MUST accept requests via both GET and POST.
            The Client MUST understand the login_hint and iss parameters and SHOULD support the target_link_uri parameter.
        request_uris:
          type: array
          items:
            type: string
            format: uri
          example:
            - 'https://client.example.com/request_uri/0423A9B2-2687-4171-8D69-4EED4F5E4F68'
          description: >-
            Array of request_uri values that are pre-registered by the RP for use at the OP. 
            Servers MAY cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. 
            OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter. 

            If the contents of the request file could ever change, these URI values SHOULD include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. 
            If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.
        backchannel_logout_uri:
          type: string
          format: uri
          example: https://client.example.com/backchannel_logout
          description: Uri on RP used for back-channel logout
        scope:
          type: string
          description: >-
            The list of all scopes requested from the resource owner as string space-separated.
          example: 'openid profile.name profile.addresses'
        required_scope:
          type: string
          description: >-
            The subset of scopes requested from the resource owner. These scopes are handled as mandatory scopes.
            Value is string space-separated list of scopes. If the value is empty MUST be handled the same as NOT present in the request.
            An empty value or omitted property means all scopes in `scope` property are optional.
          example: 'profile.addresses'
        notification_uri:
          type: string
          format: uri
          description: >-
            Endpoint to be used for notifications about events.
          example: https://client.example.com/notify

    ClientMetadata:
      type: object
      required:
        - client_id
        - registration_client_uri
        - registration_access_token
        - client_id_issued_at
        - client_api_key
      properties:
        client_id:
          type: string
          example: D40D25DB-C330-4331-A191-0A4F6CCD17D8
          description: >-
            Unique Client Identifier. 
            It MUST NOT be currently valid for any other registered Client.
        client_api_key:
          readOnly: true
          type: string
          example: 04A7BA86-761F-46C4-8EA4-ADDAEA9670B4
          description: >-
            This API key is to be used in the `X-API-Key` HTTP header.
            It is useful when accessing resources which require per Client tracking, but are not bound to End-User.
            For example signing and document verification API may allow document signing by applications, but not necessarily End-Users,
            however this API still needs rate-limiting and request tracking.
        registration_access_token:
          readOnly: true
          type: string
          example: 44010DFF-F77F-461A-8F3D-1466B24C5CC1
          description: Registration Access Token that can be used at the Client Configuration Endpoint to perform subsequent operations upon the Client registration.
        registration_client_uri:
          readOnly: true
          type: string
          format: uri
          example: https://idp.example.com/connect/register/D40D25DB-C330-4331-A191-0A4F6CCD17D8
          description: >-
            Location of the Client Configuration Endpoint where the Registration Access Token can be used to perform subsequent operations upon the resulting Client registration. 
            Implementations MUST either return both a Client Configuration Endpoint and a Registration Access Token or neither of them.
        client_id_issued_at:
          readOnly: true
          type: number
          format: int64
          example: 1579263956
          description: >-
            Time at which the Client Identifier was issued.
            Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.

    ClientInfo:
      allOf:
        - $ref: '#/components/schemas/ClientMetadata'
        - $ref: '#/components/schemas/ClientSettings'

    JWKS:
      description: JSONWebKeySet JSON web key set
      type: object
      properties:
        keys:
          description: >-
            The value of the "keys" parameter is an array of JWK values. By default, the order of the JWK values within the array does not imply an order of preference among them,
            although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
          type: array
          items:
            $ref: '#/components/schemas/JWK'

    JWK:
      description: JSON Web Key [RFC7517](https://tools.ietf.org/html/rfc7517)
      type: object
      required:
        - use
        - kty
        - kid
        - alg
        - x5c
      properties:
        alg:
          description: >-
            The "alg" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the
            IANA "JSON Web Signature and Encryption Algorithms" registry established by [JWA] or be a value that contains a Collision-
            Resistant Name. The "alg" value is a case-sensitive ASCII string.
          type: string
          example: RS256
          enum:
            - PS512
            - ES512
            - RSA-OAEP
            - RSA-OAEP-256
        kid:
          description: >-
            The "kid" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set
            during key rollover.  The structure of the "kid" value is unspecified.  When "kid" values are used within a JWK Set, different
            keys within the JWK Set SHOULD use distinct "kid" values.  (One example in which different keys might use the same "kid" value is if
            they have different "kty" (key type) values but are considered to be equivalent alternatives by the application using them.)  The "kid"
            value is a case-sensitive string.  Use of this member is OPTIONAL. When used with JWS or JWE, the "kid" value is used to match a JWS or
            JWE "kid" Header Parameter value.
          type: string
          example: 1603dfe0af8f4596
        key_ops:
          description: >-
            The "key_ops" (key operations) parameter identifies the operation(s) for which the key is intended to be used.  The "key_ops" parameter is
            intended for use cases in which public, private, or symmetric keys may be present.

            Its value is an array of key operation values.  Values defined by this specification are:

            * "sign" (compute digital signature or MAC)
            * "verify" (verify digital signature or MAC)
            * "encrypt" (encrypt content)
            * "decrypt" (decrypt content and validate decryption, if applicable)
            * "wrapKey" (encrypt key)
            * "unwrapKey" (decrypt key and validate decryption, if applicable)
            * "deriveKey" (derive key)
            * "deriveBits" (derive bits not to be used as a key)

            (Note that the "key_ops" values intentionally match the "KeyUsage" values defined in the Web Cryptography API [W3C.CR-WebCryptoAPI-20141211] specification.)

            Other values MAY be used.  The key operation values are case-sensitive strings.  Duplicate key operation values MUST NOT be present in the array.  Use of the "key_ops" member is OPTIONAL,
            unless the application requires its presence.

            Multiple unrelated key operations SHOULD NOT be specified for a key because of the potential vulnerabilities associated with using the
            same key with multiple algorithms.  Thus, the combinations "sign" with "verify", "encrypt" with "decrypt", and "wrapKey" with
            "unwrapKey" are permitted, but other combinations SHOULD NOT be used.

            Additional "key_ops" (key operations) values can be registered in the IANA "JSON Web Key Operations" registry established by Section 8.3.
            The same considerations about registering extension values apply to the "key_ops" member as do for the "use" member.

            The "use" and "key_ops" JWK members SHOULD NOT be used together; however, if both are used, the information they convey MUST be consistent.  Applications should specify which of these members they
            use, if either is to be used by the application.
          type: array
          items:
            type: string
            enum:
              - sign
              - verify
              - encrypt
              - decrypt
              - wrapKey
              - unwrapKey
              - deriveKey
              - deriveBits
          example: [sign, verify]
        use:
          description: >-
            The "use" (public key use) parameter identifies the intended use of the public key.  The "use" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature
            on data.

            Values defined by this specification are:
            *  "sig" (signature)
            *  "enc" (encryption)

            Other values MAY be used.  The "use" value is a case-sensitive string.  Use of the "use" member is OPTIONAL, unless the application requires its presence.

            When a key is used to wrap another key and a public key use designation for the first key is desired, the "enc" (encryption) key use value is used, since key wrapping is a kind of encryption.  The
            "enc" value is also to be used for public keys used for key agreement operations.
          type: string
          enum:
            - sig
            - enc
          example: sig
        kty:
          description: >-
            The "kty" (key type) parameter identifies the cryptographic algorithm  family used with the key, such as "RSA" or "EC".  "kty" values should
            either be registered in the IANA "JSON Web Key Types" registry established by [JWA] or be a value that contains a Collision-
            Resistant Name.  The "kty" value is a case-sensitive string.  This member MUST be present in a JWK.

            A list of defined "kty" values can be found in the IANA "JSON Web Key Types" registry established by [JWA]; the initial contents of this
            registry are the values defined in Section 6.1 of [JWA].

            The key type definitions include specification of the members to be used for those key types.  Members used with specific "kty" values
            can be found in the IANA "JSON Web Key Parameters" registry established by Section 8.1.
          type: string
          example: RSA
          enum:
            - RSA
            - EC
        x5c:
          description: >-
            The "x5c" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is
            represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] --
            not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first
            certificate.  This MAY be followed by additional certificates, with each subsequent certificate being the one used to certify the
            previous one.  The key in the first certificate MUST match the public key represented by other members of the JWK.
          type: string
          format: uri
          example: MIICUDCCAbmgAwIBAgIBADANBgkqhkiG9w0BAQsFADBFMQswCQYDVQQGEwJjejEOMAwGA1UECAwFUHJhaGExEDAOBgNVBAoMB0V4YW1wbGUxFDASBgNVBAMMC2V4YW1wbGUuY29tMB4XDTIwMDExNjE2NDExOFoXDTIxMDExNTE2NDExOFowRTELMAkGA1UEBhMCY3oxDjAMBgNVBAgMBVByYWhhMRAwDgYDVQQKDAdFeGFtcGxlMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEArOEYBRyBhcd6u3phrbU2xvTaBoy6W14CpqqfsBrfsUsuSB+JELBCj3a+zRIvy4EY9cnQbF7cPNxbXdCbGEokAUjIIuVBk/I6XhKRe01vlax82o+eFfIhUfl7Xb2Bx9U3m98Qbt3WNrv+VYJjjFP8HWSsWCHKCazj+yvozjuFXUsCAwEAAaNQME4wHQYDVR0OBBYEFN5SUrsStd4aLhBs+MWGRDxLeUP4MB8GA1UdIwQYMBaAFN5SUrsStd4aLhBs+MWGRDxLeUP4MAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADgYEAL59fE6itiRrck6Z7RCjwnOnebQJxpoB/L7TUC/aUIXss40mCviBVKD+Hl4+3sGyp4J2LlzzqhFcPgR9NyxQt0bkahJGH0UXvZETJe719UA0kGFrPMdt6ujwB6/rafT6TinzXN0lEEGikersTrh3BR9Hjw+v7nCQ0D5RfuDn6s5s=

    JWSAlg:
      externalDocs:
        description: 'OpenID JWS supported algorithm'
        url: https://openid.net/specs/draft-jones-json-web-signature-04.html#AlgTable
      type: string
      enum:
        - ES512
        - PS512

    JWEAlg:
      externalDocs:
        description: 'RFC7518 and JSON Web Encryption (JWE) draft-jones-json-web-encryption-02'
        url: https://openid.net/specs/draft-jones-json-web-encryption-02.html#AlgTable
      type: string
      enum:
        - RSA-OAEP
        - RSA-OAEP-256

    JWEEnc:
      externalDocs:
        description: 'RFC7518 and JSON Web Encryption (JWE) draft-jones-json-web-encryption-02'
        url: https://openid.net/specs/draft-jones-json-web-encryption-02.html#EncTable
      type: string
      enum:
        - A256GCM

    AuthorizationCodeTokenRequest:
      description: 'A Client makes a Token Request by presenting its Authorization Grant (in the form of an Authorization Code) to the Token Endpoint using the grant_type value authorization_code.'
      allOf:
        - $ref: '#/components/schemas/TokenCommonPartRequest'
        - type: object
          required:
            - code
            - redirect_uri
          properties:
            code:
              type: string
              description: 'The authorization code received from the authorization server.'
              example: '8BFAC1DA-3F94-4BBD-A743-473080FB6073'
            redirect_uri:
              type: string
              format: uri
              description: >-
                If the "redirect_uri" parameter was included in the authorization request. Their values MUST be identical.
              example: 'https://rp.example.com/callback'
      example:
        grant_type: authorization_code
        code: '8BFAC1DA-3F94-4BBD-A743-473080FB6073'
        redirect_uri: 'https://rp.example.com/callback'

    RefreshTokenRequest:
      description: 'A Client makes a Access Token Request by presenting its Refresh Token to the Token Endpoint using the grant_type value refresh_token.'
      allOf:
        - $ref: '#/components/schemas/TokenCommonPartRequest'
        - type: object
          required:
            - refresh_token
          properties:
            refresh_token:
              type: string
              description: 'Used for exchanging refresh token for access token'
              example: 'A9B54609-FF9E-42F0-B089-89E1E73E224F'
            scope:
              type: string
              description: >-
                The requested scope MUST NOT include any scope not originally granted by the resource owner, and if omitted is treated as equal to the scope originally granted by the resource owner.
              example: 'openid profile.name profile.addresses'
          example:
            grant_type: refresh_token
            refresh_token: 'A9B54609-FF9E-42F0-B089-89E1E73E224F'
            scope: 'openid profile.name profile.addresses'
            redirect_uri: 'https://rp.example.com/callback'

    TokenCommonPartRequest:
      allOf:
        - $ref: '#/components/schemas/PrivateKeyJwtAuthKeys'
        - required:
            - grant_type
          properties:
            grant_type:
              type: string
              description: ''
              enum:
                - authorization_code
                - refresh_token
              example: 'authorization_code'

    PrivateKeyJwtAuthKeys:
      required:
        - client_assertion
        - client_assertion_type
      properties:
        client_assertion:
          type: string
          format: JWT
          description: >-
            The client-signed assertion in the form of a JWT used to authenticate the client if `client_secret_jwt` or
            `private_key_jwt` authentication methods are used. Defined in
            [OpenID.Core](https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication)
          example: 'PHNhbWxwOl ... ZT'
        client_assertion_type:
          type: string
          description: >-
            The type of client assertion used as defined in
            [OpenID.Core](https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication)
          example: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'

    AccessTokenResponse:
      description:
        The authorization server issues an access token and optional refresh
        token, and constructs the response by adding the following parameters
        to the entity-body of the HTTP response with a 200 (OK) status code.
      externalDocs:
        description: '[RFC6749] - The OAuth 2.0 Authorization Framework: - 5.1.  Successful Response'
        url: 'https://tools.ietf.org/html/rfc6749#section-5.1'
      required:
        - access_token
        - token_type
        - expires_in
        - id_token
      properties:
        access_token:
          description: 'The access token issued by the authorization server.'
          type: string
          example: 'c03e997c-aa96-4b3f-ad0c-98626833145d'
        token_type:
          description: 'The type of the token issued. Value is case insensitive.'
          type: string
          enum:
            - Bearer
          example: 'Bearer'
        refresh_token:
          description: 'The refresh token, which can be used to obtain new
            access tokens using the same authorization grant.'
          type: string
          example: '1f703f5f-75da-4b58-a1b0-e315700e4227'
        expires_in:
          description: 'The lifetime in seconds of the access token.  For example, the value "3600" denotes that the access token will expire in one hour from the time the response was generated.'
          type: integer
          format: int64
          example: 6000
        scope:
          description: 'If scope are not identical as requested by client.'
          type: string
          example: 'openid profile.addresses'
        id_token:
          description: 'ID Token value associated with the authenticated session.'
          type: string
          format: JWT
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

    TokenInfoResponse:
      required:
        - active
      properties:
        active:
          description: 'Boolean indicator of whether or not the presented token is currently active.  The specifics of a token''s "active" state
            will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a "true"
            value return for the "active" property will generally indicate that a given token has been issued by this authorization server,
            has not been revoked by the resource owner, and is within its given time window of validity'
          type: boolean
          example: true
        scope:
          description: 'A JSON string containing a space-separated list of scopes associated with this token'
          type: string
          example: 'openid profile.addresses'
        client_id:
          description: 'Client identifier for the OAuth 2.0 client that requested this token.'
          type: string
          example: 'd1bdc32e-1b06-4609-9f60-073685267f88'
        token_type:
          description: 'Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749]'
          type: string
          enum:
            - access_token
            - refresh_token
          example: access_token
        exp:
          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire, as defined in JWT'
          type: integer
          format: int64
          example: 1419356238
        iat:
          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued, as defined in JWT'
          type: integer
          format: int64
          example: 1419350238
        sub:
          description:
            'Subject of the token, as defined in JWT. Identifier for the End-User at the Issuer. Usually a machine-readable identifier of the resource owner who authorized this token.'
          type: string
          example: '25657805-66d4-4707-980a-f12429f17592'
        aud:
          description: 'Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT.'
          type: string
          example: 'https://rp.example.com/resource'
        iss:
          description: 'String representing the issuer of this token, as defined in JWT.'
          type: string
          example: 'https://server.example.com/'

    TokenErrorResponse:
      externalDocs:
        description: '[RFC6749] Token Error Response'
        url: 'https://tools.ietf.org/html/rfc6749#section-5.2'
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_client
            - invalid_scope
          description: >-
            Possible error codes:
            * invalid_request - The request is missing a required parameter.
            * invalid_grant - The provided authorization grant or refresh token is invalid, expired, revoked etc.
            * invalid_client - Client authentication failed
            * unauthorized_client - The authenticated client is not authorized to use this authorization grant type.
            * unsupported_grant_type - The authorization grant type is not supported by the authorization server.
            * invalid_scope - The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.
          example: invalid_request
        error_description:
          type: string
          description: Additional text description of the error for debugging.
          example: 'Missing required parameter'
        error_uri:
          type: string
          description: A URI identifying a human-readable web page with information with details of the error.
          example: 'https://page.with.errorcodes.org/invalid_request'
      required:
        - error
      description: >-
        The authorization server responds with an HTTP 400 (Bad Request)
        status code (unless specified otherwise) and includes the following
        parameters with the response:

        * **error** - **REQUIRED**.  A single ASCII [USASCII] error code from the following:

          - **invalid_request** - 
                The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,
                utilizes more than one mechanism for authenticating the client, or is otherwise malformed.

          - **invalid_client** -
                Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY
                return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the "Authorization"
                request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the "WWW-Authenticate" response header field
                matching the authentication scheme used by the client.

          - **invalid_grant** -
                The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection
                URI used in the authorization request, or was issued to another client.

          - **unauthorized_client** -
                The authenticated client is not authorized to use this authorization grant type.

          - **unsupported_grant_type** - 
                The authorization grant type is not supported by the authorization server.

          - **invalid_scope** -
                The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.

          Values for the "error" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.

        * **error_description**
              OPTIONAL.  Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred.
              Values for the "error_description" parameter MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.

        * **error_uri**
              OPTIONAL.  A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.
              Values for the "error_uri" parameter MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E.

    TokenIntrospectionRequest:
      description: >-
        The protected resource calls the introspection endpoint using an HTTP POST [RFC7231] request with parameters sent as "application/x-www-form-urlencoded" data as defined in
        [W3C.REC-html5-20141028].  The protected resource sends a parameter representing the token along with optional parameters representing
        additional context that is known by the protected resource to aid the authorization server in its response.
      externalDocs:
        description: 'OAuth 2.0 Token Introspection - 2.1.  Introspection Request'
        url: 'https://tools.ietf.org/html/rfc7662#section-2.1'
      allOf:
        - $ref: '#/components/schemas/PrivateKeyJwtAuthKeys'
        - required:
            - token
            - token_type_hint
          properties:
            token:
              type: string
              description: >-
                The string value of the token.  For access tokens, this is the "access_token" value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1.  For refresh tokens,
                this is the "refresh_token" value returned from the token endpoint as defined in OAuth 2.0 [RFC6749], Section 5.1.
              example: 'WwVEraxkI7KbtP31wD3XSpZKqGpsLiXg'
            token_type_hint:
              type: string
              description: >-
                A hint about the type of the token submitted for introspection.  The protected resource MAY pass this parameter to help the authorization server optimize the token lookup.  If the
                server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types.  An authorization server MAY ignore this parameter, 
                particularly if it is able to detect the token type automatically.  Values for this field are defined in the "OAuth Token Type Hints" registry defined in OAuth Token Revocation [RFC7009].
              enum:
                - refresh_token
                - access_token
              example: refresh_token

    TokenRevocationRequest:
      allOf:
        - $ref: '#/components/schemas/PrivateKeyJwtAuthKeys'
        - required:
            - token
          properties:
            token:
              description: The token that the client wants to get revoked.
              type: string
            token_type_hint:
              description: >-
                A hint about the type of the token submitted for revocation.  Clients MAY pass this parameter in order to help the authorization server to optimize the token
                lookup.  If the server is unable to locate the token using the given hint, it MUST extend its search across all of its supported token types.  An authorization server MAY ignore
                this parameter, particularly if it is able to detect the token type automatically.
              type: string
              enum:
                - access_token
                - refresh_token

    IDToken:
      externalDocs:
        description: '[OpenID.Core ID Token] 2 ID Token'
        url: 'https://openid.net/specs/openid-connect-core-1_0.html#IDToken'
      description: >-
        The primary extension that OpenID Connect makes to OAuth 2.0 to enable End-Users to be Authenticated is the ID Token data structure.
        The ID Token is a security token that contains Claims about the Authentication of an End-User by an Authorization Server when using a Client, and potentially other requested Claims.
        The ID Token is represented as a JSON Web Token (JWT) [JWT].
      type: object
      required:
        - iss
        - sub
        - aud
        - exp
        - iat
        - auth_time
        - nonce
        - acr
        - amr
        - jti
      properties:
        iss:
          type: string
          description: Issuer Identifier, as specified in Section 2 of [OpenID.Core].
        sub:
          type: string
          description: Subject Identifier, as specified in Section 2 of [OpenID.Core].
        idcard_hashes:
          type: array
          items:
            type: string
          description: >-
            This parameter contains a array of string hashes consisting of the document type and the user document. The document type is a String representing one of the values from the code list for the idcards [] .type element in the endpoint /profile. UNKNOWN type is not allowed.


            Possible types (same as idcards.type entity):

              * `ID` - Identity card.
              * `P`  - Passport
              * `DL` - Driving license
              * `IR` - Residence permit
              * `VS` - Visa permit label
              * `PS` - Residential label
              * `IX` - Book with residence permit
              * `IE` - Form with temporary residence
              * `OP` - Identity card – without machine readable zone
              * `CA` - Passport of the Czech Republic resident – without machine readable zone
            And the document number that was last verified in ROB.

            Example: SHA2-512 ("ID0123443211")

            The required hash algorithm is SHA2-512.

          example: ['6f3e1ec486a610481639a79d7e1b0c74b7866cfc78adf48ba25b9c68a4bdaa66d13d7621b678ef756a93cc264ca24fec4854bb66fae7649ca30a775514f223d7', '6f3e1ec486a610481639a79d7e1b0c74b7866cfc78adf48ba25b9c68a4bdaa66d13d7621b32112126a93cc264ca24fec4854bb66fae7649ca30a775514f223d7']

        aud:
          type: string
          description: Audience(s), as specified in Section 2 of [OpenID.Core].
        exp:
          type: integer
          format: int64
          description: >-
            Expiration time on or after which the ID Token MUST NOT be accepted for processing. The processing of this parameter requires that the current date/time MUST be before 
            the expiration date/time listed in the value. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. 
            Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time. See RFC 3339 [RFC3339] for details regarding 
            date/times in general and UTC in particular.
          example: 234567890
        iat:
          type: number
          format: int64
          description: >-
            Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
          example: 23457890
        auth_time:
          type: number
          format: int64
          description: >-
            Time when the End-User authentication occurred. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time. 
            When a max_age request is made or when auth_time is requested as an Essential Claim, then this Claim is REQUIRED; otherwise, its inclusion is OPTIONAL. (The auth_time Claim 
            semantically corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] auth_time response parameter.)
          example: 23456789
        nonce:
          type: string
          description: >-
            String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication 
            Request to the ID Token. If present in the ID Token, Clients MUST verify that the nonce Claim Value is equal to the value of the nonce parameter sent in the Authentication Request. 
            If present in the Authentication Request, Authorization Servers MUST include a nonce Claim in the ID Token with the Claim Value being the nonce value sent in the Authentication Request. 
            Authorization Servers SHOULD perform no other processing on nonce values used. The nonce value is a case sensitive string.
          example: 'nxrt-084-222_wdutKuOasdj'
        acr:
          type: string
          enum:
            - loa3
            - loa2
          description: >-
            The parameter represents the used authentication level.

            The value of loa2 corresponds to one-factor authentication. The value of loa3 corresponds to authentication using two
            independent verification factors (2FA or also SCA).
          example: 'loa3'
        amr:
          type: array
          items:
            type: string
            example: face
            enum:
              - face
              - fpt
              - geo
              - hwk
              - iris
              - kba
              - mca
              - mfa
              - otp
              - pin
              - pwd
              - rba
              - retina
              - sc
              - sms
              - swk
              - tel
              - user
              - wbm
              - wia
          description: >-
            Authentication Methods References. JSON array of strings that are identifiers for authentication 
            methods used in the authentication. For instance, values might indicate that both password and 
            OTP authentication methods were used. The definition of particular values to be used in the amr 
            Claim is beyond the scope of this specification. Parties using this claim will need to agree 
            upon the meanings of the values used, which may be context-specific. The amr value is an array 
            of case sensitive strings.
            
            In case it is not possible to identify used biometrics in mobile device, use ```fpt```.
            
            The following is a list of Authentication Method Reference values
            defined by this specification:

            * face -
                Biometric authentication [RFC4949] using facial recognition

            * fpt -
                Biometric authentication [RFC4949] using a fingerprint

            * geo -
                Use of geolocation information for authentication, such as that provided by [W3C.REC-geolocation-API-20161108]

            * hwk -
                Proof-of-possession (PoP) of a hardware-secured key. See Appendix C of [RFC4211] for a discussion on PoP.

            * iris -
                Biometric authentication [RFC4949] using an iris scan

            * kba -
                Knowledge-based authentication [NIST.800-63-2] [ISO29115]

            * mca -
                Multiple-channel authentication [MCA].  The authentication involves communication over more than one distinct communication
                channel.  For instance, a multiple-channel authentication might involve both entering information into a workstation's browser and
                providing information on a telephone call to a pre-registered number.

            * mfa -
                Multiple-factor authentication [NIST.800-63-2]  [ISO29115].  When this is present, specific authentication methods used may also be included.

            * otp -
                One-time password [RFC4949].  One-time password specifications that this authentication method applies to include [RFC4226] and [RFC6238].

            * pin -
                Personal Identification Number (PIN) [RFC4949] or pattern (not restricted to containing only numbers) that a user enters to unlock a key on the device.  This mechanism should have a way to
                deter an attacker from obtaining the PIN by trying repeated guesses.

            * pwd -
                Password-based authentication [RFC4949]

            * rba -
                Risk-based authentication [JECM]

            * retina -
                Biometric authentication [RFC4949] using a retina scan

            * sc -
                Smart card [RFC4949]

            * sms -
                Confirmation using SMS [SMS] text message to the user at a registered number

            * swk -
                Proof-of-possession (PoP) of a software-secured key.  See Appendix C of [RFC4211] for a discussion on PoP.

            * tel -
                Confirmation by telephone call to the user at a registered number. This authentication technique is sometimes also referred to as "call back" [RFC4949].

            * user -
                User presence test.  Evidence that the End-User is present and interacting with the device.  This is sometimes also referred to as "test of user presence" [W3C.WD-webauthn-20170216].

            * vbm -
                Biometric authentication [RFC4949] using a voiceprint

            * wia -
                Windows integrated authentication [MSDN]
          example: ['face', 'user']
        jti:
          type: string
          description: >-
            The `jti` (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be
            accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well.  The `jti` claim can be used
            to prevent the JWT from being replayed.  The `jti` value is a case-sensitive string.
          example: '95E3440A-C986-4E8B-9678-605F9B2FE7C5'

    HealthCheckResult:
      description: >-
        HealthCheck response and metadata. Contains list of HealthChecks for specific Bank services.
      required:
        - status
        - time
      properties:
        status:
          $ref: '#/components/schemas/HealthCheckStatus'
        description:
          type: string
          example: Bank iD API
          description: API description
        version:
          type: string
          example: 1.1.0
          description: Version of the API
        time:
          type: string
          format: date-time
          description: API status time
        outage_planned_until:
          type: string
          format: date-time
          example: null
          description: If it is a planned outage, this is the date until which the outage lasts.
        outage_description:
          type: string
          example: null
          description: A reason or justification for this outage.
        poll_interval:
          type: number
          example: 200
          description: >-
            Recommended interval in milliseconds that determines how often the HealthCheck resource should be called.
            Calls that are too frequent can lead to HTTP error 424.
        details:
          type: object
          description: >-
            Optional collection of API sub-services with their own states.
            In this way, the bank can say that, for example, the API as a whole works up to a subset (such as an overview of account transactions).
          properties:
            dynamic-registration:
              allOf: [$ref: '#/components/schemas/ServiceHealthCheck']
              description: Describes the current state of the Dynamic Registration APIs. This means `POST /register` and `GET/PUT/DELETE /register/{client_id}`
            oidc-core:
              allOf: [$ref: '#/components/schemas/ServiceHealthCheck']
              description: Describes the current state of the OpenID Connect Core APIs. This means `POST/GET /auth`, `POST/GET /token`, `POST/GET /token-info` and `GET /.well-known/*`
            revoke:
              allOf: [$ref: '#/components/schemas/ServiceHealthCheck']
              description: Describes the current state of the Token Revocation API. This means `POST /revoke`
            kyc:
              allOf: [$ref: '#/components/schemas/ServiceHealthCheck']
              description: Describes the current state of the UserInfo API. This means `POST /userinfo` or `POST /profile`

    ServiceHealthCheck:
      type: object
      required:
        - status
        - time
      properties:
        status:
          $ref: '#/components/schemas/HealthCheckStatus'
        description:
          type: string
          description: API description
        version:
          type: string
          example: 1.1.4
          description: Version of the API
        time:
          type: string
          format: date-time
          description: API status time

    HealthCheckStatus:
      description: >-
        HealthCheck status describing liveness and outage state of said service

        - OK: The entire API or a specified portion (detail) of the API is available.
        - OUTAGE: The entire API or a specified portion (detail) of the API is temporary unavailable.
        - ERROR: The entire API or a specified portion (detail) of the API is unavailable.
      type: string
      enum:
        - OK
        - OUTAGE
        - ERROR

    RegistrationAuthJWT:
      description: >-
        Contents of the JWT Bearer token used for the dynamic registration API.
        This token MUST be signed using a key from the `/.well-known/jwks.json` JWKS EP of the RP.
      type: object
      required:
        - aud
        - exp
        - jti
      properties:
        aud:
          type: string
          description: Audience. The aud (audience) Claim. This value MUST be a URL of the dynamic registration EP.
          example: 'https://op.example.com/register'
        jti:
          type: string
          description: JWT ID. A unique identifier for the token, which can be used to prevent reuse of the token. These tokens MUST only be used once, unless conditions for reuse were negotiated between the parties; any such negotiation is beyond the scope of this specification.
          example: 95E3440A-C986-4E8B-9678-605F9B2FE7C5
        exp:
          type: integer
          format: int64
          example: 1419356238
          description: Expiration time on or after which the ID Token MUST NOT be accepted for processing.
        iat:
          type: integer
          format: int64
          description: Time at which the JWT was issued.
          example: 1419356238
        iss:
          type: string
          description: Issuer Identifier, as specified in Section 2 of [OpenID.Core].
        sub:
          type: string
          description: Subject Identifier, as specified in Section 2 of [OpenID.Core].
          
    unauthorized:
      description: Unauthorized
      properties:
        error:
          type: string
          title: error
        error_description:
          type: string
          title: message
      required:
        - error
    invalid:
      description: Invalid request
      properties:
        error:
          type: string
          title: error
        error_description:
          type: string
          title: message
      required:
        - error
    forbidden:
      description:
        Authentication with an expired access token or  bearer access token
        having insufficient privileges
      properties:
        error:
          type: string
          title: error
        error_description:
          type: string
          title: message
      required:
        - error

    WWW-Authenticate:
      externalDocs:
        description: '[RFC6750] - The OAuth 2.0 Authorization Framework: Bearer Token Usage -  3.1. Error Codes'
        url: https://tools.ietf.org/html/rfc6750#section-3.1
      type: string
      enum:
        - invalid_request
        - invalid_token
        - insufficient_scope
      description: >-
        Possible error codes:
        * `invalid_request` - The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. 
          The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.
        
        * `invalid_token` - The access token provided is expired, revoked, malformed, or invalid for other reasons. 
          The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. 
          The client MAY request a new access token and retry the protected resource request.
        
        * `insufficient_scope` - The request requires higher privileges than provided by the access token. 
          The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the "scope" attribute with the scope necessary to access the protected resource.

    RequestInvalidError:
      description: Request invalid payload
      type: object
      required:
        - error
        - error_description
      properties:
        error:
          type: string
          enum:
            - invalid_redirect_uri
            - invalid_client_metadata
          description: >-
            Possible error codes:
            * `invalid_redirect_uri` - The value of one or more `redirect_uris` is invalid. 
            * `invalid_client_metadata` - The value of one of the Client Metadata fields is invalid and the server has rejected this request.
        error_description:
          type: string
          example: Redirect uri must be using https scheme
          description: Additional text description of the error for debugging.

    NotFoundException:
      description: Request invalid payload
      type: object
      required:
        - error
        - error_description
      properties:
        error:
          type: string
          enum:
            - request_uri_not_found
            - redirect_uri_not_found
          description: >-
            Possible error codes:
            * `request_uri_not_found` - Request Object was not found on server
            * `redirect_uri_not_found` - Redirect URI was not found
        error_description:
          type: string
          example: Redirect uri must be using https scheme
          description: Additional text description of the error for debugging.

    UserNotEligible:
      description: End-user online data validation via state registers
      type: object
      required:
        - error
        - error_description
      properties:
        error:
          type: string
          enum:
            - user_not_eligible
        error_description:
          type: string
          example: User data cannot be validated


  securitySchemes:
    AccessTokenAuth:
      type: http
      scheme: bearer
      description: '`access_token` acquired from the /token endpoint during RP authorization'

    RegistrationAuth:
      type: http
      scheme: bearer
      description: >-
        HTTP bearer authentication where bearer token is a JWT signed with a key from `/.well-known/jwks.json` of the RP.
        This JWT contains claims defined in the RegistrationAuthJWT schema above:

    RegistrationTokenAuth:
      type: http
      scheme: bearer
      description: '`registration_access_token` value acquired from the dynamic client registration /register endpoint'

    userInfo:
      description: Authorization userInfo
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://
          tokenUrl: https://
          scopes:
            profile.name: name, given_name, family_name, middle_name, nickname and preferred_username
            profile.gender: gender
            profile.email: email and email_verified
            profile.phonenumber: phone_number and phone_number_verified
            profile.birthdate: birthdate
            profile.zoneinfo: zoneinfo
            profile.locale: locale
            profile.updatedat: updated_at
            notification.claims_updated: The application wants to send notifications

    profile:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://
          tokenUrl: https://
          scopes:
            profile.name: given_name, family_name, middle_name
            profile.titles: title_prefix and title_suffix
            profile.gender: gender
            profile.birthdate: birthdate, age and date_of_death
            profile.birthnumber: birthnumber
            profile.birthplaceNationality: birthplace, birthcountry, primary_nationality and nationalities
            profile.maritalstatus: maritalstatus
            profile.addresses:
              addresses.type, addresses.street, addresses.buildingapartment,
              addresses.streetnumber, addresses.evidencenumber, addresses.city, 
              addresses.cityarea, addresses.zipcode, addresses.country and addresses.ruian_reference
            profile.idcards: idcards.type, idcards.description, idcards.country,
              idcards.number, idcards.valid_to, idcards.issuer and idcards.issue_date
            profile.paymentAccounts: paymentAccounts, paymentAccountsDetails
            profile.email: email
            profile.phonenumber: phone_number
            profile.updatedat: updated_at
            profile.legalstatus: majority, pep, limited_legal_capacity
            notification.claims_updated: The application wants to send notifications
            sign.qualified: Bank iD needs to get data for Qualified certificate.
            sign.officially_certified: Bank iD needs to get data for Qualified certificate.

    Bearer:
      description: |
        For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.
        The following syntax must be used in the 'Authorization' header :
            `Bearer: xxxxxx.yyyyyyy.zzzzzz`

      type: apiKey
      name: Authorization
      in: header

  responses:
    TokenErrorResponse:
      description: Request invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenErrorResponse'
      headers:
        X-B3-TraceId:
          description: Unique ID for each API call for support purposes.
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'

    UnauthorizedError:
      description: Access token is missing or invalid
      headers:
        X-B3-TraceId:
          description: Unique ID for each API call for support purposes.
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
        WWW-Authenticate:
          description: '[RFC6750](https://tools.ietf.org/html/rfc6750#section-3.1) `invalid_request`, `invalid_token`, `insufficient_scope`'
          schema:
            $ref: '#/components/schemas/WWW-Authenticate'

    RequestInvalidError:
      description: Request invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestInvalidError'
      headers:
        X-B3-TraceId:
          description: Unique ID for each API call for support purposes.
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
                
                
    TooManyRequestError:
      description: Corresponding client have sent too many request
      headers:
        RetryAfter:
          description: Time period after which client can try request again
          schema:
            type: integer
            format: uri
          example: 3600
        X-B3-TraceId:
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'
          
    UserNotEligible:
      description: End-user data could not be validated online via basic registers or data are missing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserNotEligible'
      headers:
        X-B3-TraceId:
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'

    NotFoundException:
      description: Request invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundException'
      headers:
        X-B3-TraceId:
          description: Unique ID for each API call for support purposes.
          schema:
            $ref: '#/components/schemas/X-B3-TraceId'

  examples:
    userInfo:
      value:
        sub: 23f1ac00-5d54-4169-a288-794ae2ead0c4
        txn: 6941683f-c6ee-410c-add0-d52d63091069:openid:profile.name:profile.gender
        verified_claims:
          verification:
            trust_framework: cz_aml
            time: 2020-02-09T18:43:26+02:00
            verification_process: '45244782'
          claims:
            name: Jan Novák
            given_name: Jan
            family_name: Novák
            gender: male
            birthdate: '1970-08-01'
        name: Jan Novák
        given_name: Jan
        family_name: Novák
        gender: male
        birthdate: '1970-08-01'
        nickname: Fantomas
        preferred_username: JanN
        email: j.novak@email.com
        email_verified: false
        zoneinfo: Europe/Prague
        locale: cs_CZ
        phone_number: '+420123456789'
        phone_number_verified: true
        updated_at: 1650887066

    profile:
      value:
        sub: '23f1ac00-5d54-4169-a288-794ae2ead0c4'
        txn: '6941683f-c6ee-410c-add0-d52d63091069:openid:profile.name:profile.addresses'
        verified_claims:
          verification:
            trust_framework: cz_aml
            time: 2020-02-09T18:43:26.000Z
            verification_process: '45244782'
          claims:
            given_name: Jan
            family_name: Novák
            gender: 'male'
            birthdate: '1970-08-01'
            addresses:
              - type: 'PERMANENT_RESIDENCE'
                street: 'Olbrachtova'
                buildingapartment: '1929'
                streetnumber: '62'
                evidencenumber: '21a'
                city: 'Praha'
                zipcode: '14000'
                country: 'CZ'
            idcards:
              - type: 'ID'
                description: 'Občanský průkaz'
                country: 'CZ'
                number: '123456789'
                valid_to: '2023-10-11'
                issuer: 'Úřad městské části Praha 4'
                issue_date: '2020-01-28'
        given_name: 'Jan'
        family_name: 'Novák'
        gender: 'male'
        birthdate: '1970-08-01'
        birthnumber: '7008010147'
        age: 50
        majority: true
        date_of_death: null
        birthplace: 'Praha 4'
        birthcountry: 'CZ'
        primary_nationality: 'CZ'
        nationalities: ['CZ', 'AT', 'SK']
        maritalstatus: 'MARRIED'
        email: 'J.novak@email.com'
        phone_number: '+420123456789'
        pep: false
        limited_legal_capacity: false
        addresses:
          - type: 'PERMANENT_RESIDENCE'
            street: 'Olbrachtova'
            buildingapartment: '1929'
            streetnumber: '62'
            evidencenumber: '21a'
            city: 'Praha'
            cityarea: 'Krč'
            zipcode: '14000'
            country: 'CZ'
            ruian_reference: '186GF76'
        idcards:
          - type: 'ID'
            description: 'Občanský průkaz'
            country: 'CZ'
            number: '123456789'
            valid_to: '2023-10-11'
            issuer: 'Úřad městské části Praha 4'
            issue_date: '2020-01-28'
        paymentAccounts:
          - CZ0708000000001019382023
        paymentAccountsDetails:
          - iban: CZ0708000000001019382023
            currency: CZK
        updated_at: 1650887066

    userInfoJWT:
      value: ewoidHlwIjoiVXNlcmluZm8iLAoiYWxnIjoiSFMyNTYiCn0K. ewoic3ViIjogIjIzZjFhYzAwLTVkNTQtNDE2OS1hMjg4LTc5NGFlMmVhZDBjNCIsCiJuYW1lIjogIkphbiBOb3bDoWsiLAoiZ2l2ZW5fbmFtZSI6ICJKYW4iLAogIAkiZmFtaWx5X25hbWUiOiAiTm92w6FrIiwKICAJIm1pZGRsZV9uYW1lIjogIiIsCiAgCSJuaWNrbmFtZSI6ICJab3JybyIsCiAgCSJwcmVmZXJyZWRfdXNlcm5hbWUiOiAiSmFuIiwKIAkiZW1haWwiOiAiSi5ub3Zha0BlbWFpbC5jb20iLAogIAkiZW1haWxfdmVyaWZpZWQiOiB0cnVlLAogIAkiZ2VuZGVyIjogIm1hbGUiLAogIAkiYmlydGhkYXRlIjogIjE5NzAtMDgtMDEiLAogIAkiem9uZWluZm8iOiAiRXVyb3BlL1ByYWd1ZSIsCiAgCSJsb2NhbGUiOiAiY3NfQ1oiLAogIAkicGhvbmVfbnVtYmVyIjogIis0MjAxMjM0NTY3ODkiLAogIAkicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjogZmFsc2UsCiAidXBkYXRlZF9hdCI6IDE1NjgxODg0MzMwMDAKfQo=. cDEuITlDHi14RUEGG3cxEWoXFzZWIG46JmMWZu+/vXImNBh0QUXlgq07xbYWYzF2biUl77+9dXZ2XAEjbFg1fgEDKRXYrgUuCm8kWzNKHgQKIARNPhIBMHlbMtS9O0FmZRl5I31w07FdPC4ndUVkRBd6Dj4nWmEKe9aHHjFgAxFIUTI8bgFbPfK6lbcXLFZsWVZpKBw0MmlUPQFw
